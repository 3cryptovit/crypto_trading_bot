import logging
import os
import time
import asyncio
import json
import re
import requests
import numpy as np
from pybit.unified_trading import HTTP
from datetime import datetime
import talib
import aiohttp
from dotenv import load_dotenv
import sys

# ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è aiodns –Ω–∞ Windows
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# ======================== –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ========================
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

def validate_config():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    """
    critical_errors = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
    if not os.getenv("BYBIT_API_KEY") or not os.getenv("BYBIT_API_SECRET"):
        critical_errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ Bybit")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram —Ç–æ–∫–µ–Ω
    if not os.getenv("TELEGRAM_BOT_TOKEN") or not os.getenv("TELEGRAM_CHAT_ID"):
        critical_errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª
    symbol = os.getenv("SYMBOL", "BTCUSDT").upper()
    if not symbol.endswith("USDT"):
        critical_errors.append(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å–∏–º–≤–æ–ª {symbol}. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å USDT-–º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–µ—á–æ
    try:
        leverage = int(os.getenv("LEVERAGE", 3))
        min_leverage = int(os.getenv("MIN_LEVERAGE", 1))
        max_leverage = int(os.getenv("MAX_LEVERAGE", 5))
        
        if leverage < min_leverage or leverage > max_leverage:
            critical_errors.append(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø–ª–µ—á–æ {leverage} –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [{min_leverage}, {max_leverage}]")
    except ValueError:
        critical_errors.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–µ—á–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
    try:
        risk_percentage = float(os.getenv("RISK_PERCENTAGE", 1))
        if risk_percentage <= 0 or risk_percentage > 5:
            critical_errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞: {risk_percentage}. –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 0-5%")
    except ValueError:
        critical_errors.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ä–∏—Å–∫–∞")
    
    # –î–æ–±–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ä–∏—Å–∫–∞
    max_daily_trades = int(os.getenv("MAX_DAILY_TRADES", 12))
    if not (1 <= max_daily_trades <= 20):
        critical_errors.append("MAX_DAILY_TRADES –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    if critical_errors:
        error_message = "üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n" + "\n".join(f"- {error}" for error in critical_errors)
        print(error_message)
        if os.getenv("TELEGRAM_BOT_TOKEN") and os.getenv("TELEGRAM_CHAT_ID"):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.run –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
            asyncio.run(send_telegram_message(error_message))
        sys.exit(1)
    
    return {
        "symbol": symbol,
        "leverage": leverage,
        "min_leverage": min_leverage,
        "max_leverage": max_leverage,
        "risk_percentage": risk_percentage,
        "max_daily_trades": max_daily_trades
    }

# –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
config = validate_config()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
SYMBOL = config["symbol"]
LEVERAGE = config["leverage"]
MIN_LEVERAGE = config["min_leverage"]
MAX_LEVERAGE = config["max_leverage"]
RISK_PERCENTAGE = config["risk_percentage"]
MAX_DAILY_TRADES = config["max_daily_trades"]

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TESTNET = os.getenv("TESTNET", "True").lower() == "true"
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
VOLUME_THRESHOLD = float(os.getenv("VOLUME_THRESHOLD", 1.5))
ORDERBOOK_DEPTH = int(os.getenv("ORDERBOOK_DEPTH", 10))
MIN_VOLUME_RATIO = float(os.getenv("MIN_VOLUME_RATIO", 1.2))

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π
TAKE_PROFIT_1 = float(os.getenv("TAKE_PROFIT_1", 0.3))
TAKE_PROFIT_2 = float(os.getenv("TAKE_PROFIT_2", 0.6))
TAKE_PROFIT_3 = float(os.getenv("TAKE_PROFIT_3", 1.0))
TRAILING_STOP = float(os.getenv("TRAILING_STOP", 0.2))

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
STOP_LOSS_PERCENTAGE = float(os.getenv("STOP_LOSS_PERCENTAGE", 0.3))
ATR_MULTIPLIER = float(os.getenv("ATR_MULTIPLIER", 2.0))

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
RSI_PERIOD = int(os.getenv("RSI_PERIOD", 14))
RSI_OVERBOUGHT = float(os.getenv("RSI_OVERBOUGHT", 70))
RSI_OVERSOLD = float(os.getenv("RSI_OVERSOLD", 30))
VWAP_PERIOD = int(os.getenv("VWAP_PERIOD", 20))

CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 5))

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä
MIN_POSITION_SIZES = {
    "BTCUSDT": 0.001,
    "ETHUSDT": 0.01,
    "SOLUSDT": 1,
    "XRPUSDT": 10,
    "ADAUSDT": 10,
    "DOGEUSDT": 100,
    "MATICUSDT": 10,
    "LINKUSDT": 1,
    "UNIUSDT": 0.1,
    "AVAXUSDT": 0.1
}

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ (–≤ %)
MIN_STOP_DISTANCES = {
    "BTCUSDT": 0.1,
    "ETHUSDT": 0.1,
    "SOLUSDT": 0.2,
    "XRPUSDT": 0.2,
    "ADAUSDT": 0.2,
    "DOGEUSDT": 0.3,
    "MATICUSDT": 0.2,
    "LINKUSDT": 0.2,
    "UNIUSDT": 0.2,
    "AVAXUSDT": 0.2
}

# ======================== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ========================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('trading_bot.log'),
        logging.StreamHandler()
    ]
)

def update_json_file(filename: str, data: dict) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç JSON —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if isinstance(data, dict):
            data["last_updated"] = datetime.now().isoformat()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_filename = f"{filename}.tmp"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(temp_filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        if os.path.exists(temp_filename) and os.path.getsize(temp_filename) > 0:
            # –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(filename):
                os.replace(temp_filename, filename)
            else:
                os.rename(temp_filename, filename)
            
            logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ {filename}")
            return True
        else:
            logging.error(f"‚ùå –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_filename} –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç")
            if os.path.exists(temp_filename):
                os.remove(temp_filename)
            return False
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ {filename}: {e}")
        logging.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        import traceback
        logging.error(f"‚ùå –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(temp_filename):
            os.remove(temp_filename)
        return False

def read_json_file(filename: str) -> dict:
    """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(filename, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError:
        return {}

def check_signals() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –æ—Ç Telegram –±–æ—Ç–∞"""
    try:
        signals = read_json_file('signals.json')
        if signals.get('refresh_data'):
            signals['refresh_data'] = False
            update_json_file('signals.json', signals)
            return True
        return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        return False

# ======================== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram ========================
async def send_telegram_message(message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç
    """
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        logging.warning("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Telegram –±–æ—Ç–∞")
        return
        
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    async with aiohttp.ClientSession() as session:
        async with session.post(url, data=data) as response:
            if response.status != 200:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è: {await response.text()}")

class BybitAPI:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Bybit —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    def __init__(self, session, min_request_interval=1.0):
        self.session = session
        self.min_request_interval = min_request_interval
        self.last_request_time = 0
        self.rate_limit_retries = 3
        self.rate_limit_delay = 60  # —Å–µ–∫—É–Ω–¥—ã

    async def _wait_for_rate_limit(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        current_time = time.time()
        time_since_last_request = current_time - self.last_request_time
        if time_since_last_request < self.min_request_interval:
            await asyncio.sleep(self.min_request_interval - time_since_last_request)
        self.last_request_time = time.time()

    async def _handle_api_error(self, response, retry_count=0):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API"""
        if response.get("retCode") == 0:
            return response

        error_msg = response.get("retMsg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        error_code = response.get("retCode")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ rate limit
        if error_code == 10006 and retry_count < self.rate_limit_retries:
            logging.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–Ω–∏–µ {self.rate_limit_delay} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(self.rate_limit_delay)
            return None

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
        error_message = f"–û—à–∏–±–∫–∞ API (–∫–æ–¥ {error_code}): {error_msg}"
        logging.error(error_message)
        await send_telegram_message(f"‚ö†Ô∏è {error_message}")
        return None

    async def get_positions(self, category="linear", symbol=SYMBOL):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        await self._wait_for_rate_limit()
        try:
            response = self.session.get_positions(category=category, symbol=symbol)
            return await self._handle_api_error(response)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return None

    async def get_kline(self, category="linear", symbol=SYMBOL, interval="5", limit=50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        await self._wait_for_rate_limit()
        try:
            response = self.session.get_kline(category=category, symbol=symbol, interval=interval, limit=limit)
            return await self._handle_api_error(response)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π: {e}")
            return None

    async def get_orderbook(self, category="linear", symbol=SYMBOL, limit=50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        await self._wait_for_rate_limit()
        try:
            response = self.session.get_orderbook(category=category, symbol=symbol, limit=limit)
            return await self._handle_api_error(response)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–∫–∞–Ω–∞: {e}")
            return None

    async def get_executions(self, category="linear", symbol=SYMBOL, limit=50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        await self._wait_for_rate_limit()
        try:
            response = self.session.get_executions(category=category, symbol=symbol, limit=limit)
            return await self._handle_api_error(response)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return None

    async def get_wallet_balance(self, accountType="UNIFIED"):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        await self._wait_for_rate_limit()
        try:
            response = self.session.get_wallet_balance(accountType=accountType)
            return await self._handle_api_error(response)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return None

    async def set_leverage(self, symbol=SYMBOL, leverage=5):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–µ—á–æ —Ä–∞–∑–¥–µ–ª—å–Ω–æ –¥–ª—è –ª–æ–Ω–≥–∞ –∏ —à–æ—Ä—Ç–∞"""
        try:
            await self._wait_for_rate_limit()
            response = self.session.set_leverage(
                category="linear",
                symbol=symbol,
                buyLeverage=str(leverage),
                sellLeverage=str(leverage)
            )
            return await self._handle_api_error(response)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–µ—á–∞: {e}")
            return None

    async def place_order(self, side, qty, stop_loss=None, take_profit_1=None, take_profit_2=None, take_profit_3=None):
        """
        –†–∞–∑–º–µ—â–∞–µ—Ç –ª–∏–º–∏—Ç–Ω—ã–π –º–µ–π–∫–µ—Ä-–æ—Ä–¥–µ—Ä –¥–ª—è USDT-M Perpetual Futures —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = await self.get_latest_price()
            if not current_price:
                return False

            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä
            await self._wait_for_rate_limit()
            try:
                order = self.session.place_order(
                    category="linear",
                    symbol=SYMBOL,
                    side=side,
                    orderType="Limit",
                    qty=str(qty),
                    price=str(current_price),
                    timeInForce="PostOnly"  # –ú–µ–π–∫–µ—Ä—Å–∫–∏–π –æ—Ä–¥–µ—Ä
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
                return False

            if not order or "result" not in order:
                logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {order}")
                return False

            order_id = order["result"]["orderId"]
            logging.info(f"–†–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä {order_id}")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ –ø–µ—Ä–≤—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            if stop_loss and take_profit_1:
                await self._wait_for_rate_limit()
                try:
                    self.session.set_trading_stop(
                        category="linear",
                        symbol=SYMBOL,
                        side=side,
                        stopLoss=str(stop_loss),
                        takeProfit=str(take_profit_1)
                    )
                    logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã SL: {stop_loss} –∏ TP1: {take_profit_1}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ SL/TP: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Ä–¥–µ—Ä —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω

            # –†–∞–∑–º–µ—â–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã –∫–∞–∫ –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            if take_profit_2 and take_profit_3:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                tp2_qty = qty * 0.3  # 30% –ø–æ–∑–∏—Ü–∏–∏
                tp3_qty = qty * 0.4  # 40% –ø–æ–∑–∏—Ü–∏–∏

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                if tp2_qty >= MIN_POSITION_SIZES.get(SYMBOL, 0.002):
                    await self._wait_for_rate_limit()
                    try:
                        tp2_order = self.session.place_order(
                            category="linear",
                            symbol=SYMBOL,
                            side="Sell" if side == "Buy" else "Buy",
                            orderType="Limit",
                            qty=str(tp2_qty),
                            price=str(take_profit_2),
                            timeInForce="PostOnly",
                            reduceOnly=True
                        )
                        if tp2_order and "result" in tp2_order:
                            logging.info(f"–†–∞–∑–º–µ—â–µ–Ω TP2 –æ—Ä–¥–µ—Ä: {tp2_order['result']['orderId']}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ TP2 –æ—Ä–¥–µ—Ä–∞: {e}")

                if tp3_qty >= MIN_POSITION_SIZES.get(SYMBOL, 0.003):
                    await self._wait_for_rate_limit()
                    try:
                        tp3_order = self.session.place_order(
                            category="linear",
                            symbol=SYMBOL,
                            side="Sell" if side == "Buy" else "Buy",
                            orderType="Limit",
                            qty=str(tp3_qty),
                            price=str(take_profit_3),
                            timeInForce="PostOnly",
                            reduceOnly=True
                        )
                        if tp3_order and "result" in tp3_order:
                            logging.info(f"–†–∞–∑–º–µ—â–µ–Ω TP3 –æ—Ä–¥–µ—Ä: {tp3_order['result']['orderId']}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ TP3 –æ—Ä–¥–µ—Ä–∞: {e}")

            return True
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}"
            logging.error(error_msg)
            await send_telegram_message(f"‚ö† {error_msg}")
            return False

    async def set_trading_stop(self, category="linear", symbol=SYMBOL, side="Buy", stopLoss=None, takeProfit=None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        await self._wait_for_rate_limit()
        params = {
            "category": category,
            "symbol": symbol,
            "side": side
        }
        if stopLoss:
            params["stopLoss"] = str(stopLoss)
        if takeProfit:
            params["takeProfit"] = str(takeProfit)
        
        try:
            response = self.session.set_trading_stop(**params)
            return await self._handle_api_error(response)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {e}")
            return None

    async def get_closed_pnl(self, category="linear", symbol=SYMBOL, startTime=None, endTime=None, limit=50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö PNL —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        await self._wait_for_rate_limit()
        params = {
            "category": category,
            "symbol": symbol,
            "limit": limit
        }
        if startTime:
            params["startTime"] = startTime
        if endTime:
            params["endTime"] = endTime
        
        try:    
            response = self.session.get_closed_pnl(**params)
            return await self._handle_api_error(response)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö PNL: {e}")
            return None

    async def get_order_list(self, category="linear", symbol=SYMBOL, orderId=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ—Ä–¥–µ—Ä–µ"""
        await self._wait_for_rate_limit()
        params = {
            "category": category,
            "symbol": symbol,
            "orderId": orderId
        }
        try:
            response = self.session.get_open_orders(**params)
            return await self._handle_api_error(response)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return None

    async def get_tickers(self, category="linear", symbol=SYMBOL):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Ç–∏–∫–µ—Ä–∞"""
        await self._wait_for_rate_limit()
        try:
            response = self.session.get_tickers(category=category, symbol=symbol)
            return await self._handle_api_error(response)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ä–æ–≤: {e}")
            return None

    async def get_latest_price(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É"""
        try:
            tickers = await self.api.get_tickers(category="linear", symbol=SYMBOL)
            if tickers and "result" in tickers and "list" in tickers["result"]:
                price = float(tickers["result"]["list"][0]["lastPrice"])
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –≤ price.json
                price_data = {"price": price, "last_updated": datetime.now().isoformat()}
                if update_json_file("price.json", price_data):
                    logging.info(f"‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {price}")
                else:
                    logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≤ JSON")
                return price
            return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
            return None

# ======================== –ö–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ ========================
class TradingBot:
    """
    –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bybit API
    """
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        """
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            self.leverage_set = False
            self.stop_monitor = False
            self.active_position = False
            self.current_position = None
            self.last_order_time = 0
            self.last_trade_time = time.time()  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            self.daily_trade_count = 0
            self.max_daily_trades = MAX_DAILY_TRADES
            self.min_order_interval = 300
            self.last_checked_price = None
            self.consecutive_losses = 0
            self.processed_orders = set()
            self.last_daily_reset = datetime.now().date()
            self.daily_pnl = 0
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ Bybit API
            self.session = HTTP(
                testnet=TESTNET,
                api_key=os.getenv("BYBIT_API_KEY"),
                api_secret=os.getenv("BYBIT_API_SECRET")
            )
            
            # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
            self.api = BybitAPI(self.session)
            
            self.last_positions_update = 0
            self.last_pnl_update = 0
            self.last_signal_time = None
            self.is_running = False
            self.monitor_task = None
            self.bot_task = None
            self.positions = {}
            self.pnl_data = {"daily_pnl": 0, "trades": []}
            self.signals = {"refresh_data": False, "last_signal": None, "last_updated": None}
            
            logging.info(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. leverage_set = {self.leverage_set}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            raise

    async def initialize_leverage(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–µ—á–∞"""
        try:
            if not hasattr(self, 'leverage_set'):
                self.leverage_set = False
                logging.info("‚úÖ –ê—Ç—Ä–∏–±—É—Ç leverage_set —Å–æ–∑–¥–∞–Ω")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø–ª–µ—á–æ
            positions = await self.api.get_positions(symbol=SYMBOL)
            if positions and positions.get("retCode") == 0 and "result" in positions and "list" in positions["result"]:
                position_list = positions["result"]["list"]
                
                if position_list:
                    current_leverage = None
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
                    for position in position_list:
                        if position.get("symbol") == SYMBOL:
                            current_leverage = position.get("leverage")
                            if current_leverage:
                                current_leverage = float(current_leverage)
                                break
                    
                    # –ï—Å–ª–∏ –ø–ª–µ—á–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–µ –º–µ–Ω—è–µ–º –µ–≥–æ
                    if current_leverage == LEVERAGE:
                        self.leverage_set = True
                        logging.info(f"‚úÖ –ü–ª–µ—á–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {LEVERAGE}x")
                        return True
            
            # –ï—Å–ª–∏ –ø–ª–µ—á–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç—Ä–µ–±—É–µ–º–æ–≥–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ
            retries = 3
            while retries > 0:
                result = await self.api.set_leverage(symbol=SYMBOL, leverage=LEVERAGE)
                if result and result.get("retCode") == 0:
                    self.leverage_set = True
                    logging.info(f"‚úÖ –ü–ª–µ—á–æ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {LEVERAGE}x")
                    return True
                elif result and result.get("retCode") == 110043:
                    # –û—à–∏–±–∫–∞ 'leverage not modified' - –ø–ª–µ—á–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                    self.leverage_set = True
                    logging.info(f"‚úÖ –ü–ª–µ—á–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ: {LEVERAGE}x")
                    return True
                retries -= 1
                await asyncio.sleep(1)
            
            error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ—á–æ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫"
            logging.error(error_msg)
            await send_telegram_message(error_msg)
            return False
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–µ—á–∞: {e}"
            logging.error(error_msg)
            await send_telegram_message(error_msg)
            return False

    async def process_signal(self, signal_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥–Ω–æ–π —Å–∏–≥–Ω–∞–ª –∏–∑ signals.json"""
        try:
            side = signal_data.get("side")
            price = float(signal_data.get("price"))
            stop_loss = float(signal_data.get("stop_loss"))
            take_profit_1 = float(signal_data.get("take_profit_1"))
            take_profit_2 = float(signal_data.get("take_profit_2"))
            take_profit_3 = float(signal_data.get("take_profit_3"))
            qty = float(signal_data.get("qty"))

            if not side or not price or not qty:
                logging.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞")
                return

            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            if await self.api.place_order(side, qty, stop_loss, take_profit_1, take_profit_2, take_profit_3):
                logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç –æ—Ä–¥–µ—Ä {side} {qty} @ {price}")
                self.active_position = True
                self.current_position = {
                    "side": side,
                    "entry_price": price,
                    "stop_loss": stop_loss,
                    "take_profit_1": take_profit_1,
                    "take_profit_2": take_profit_2,
                    "take_profit_3": take_profit_3,
                    "size": qty
                }

                await send_telegram_message(f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è: {side} {qty} @ {price:.2f}")

                # –û—á–∏—Å—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
                signal_data["force_trade"] = False
                update_json_file("signals.json", signal_data)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        global bot_running
        bot_running = True

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º leverage_set –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not hasattr(self, 'leverage_set'):
                self.leverage_set = False
                logging.info("‚úÖ –ê—Ç—Ä–∏–±—É—Ç leverage_set —Å–æ–∑–¥–∞–Ω –≤ run()")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–µ—á–∞
            if not self.leverage_set:
                success = await self.initialize_leverage()
                if not success:
                    logging.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞, –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É")
                    return False

            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π
            self.position_watcher_task = asyncio.create_task(self.position_monitor())

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await send_telegram_message(
                f"ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω\n"
                f"üìä –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {SYMBOL}\n"
                f"üìà –ü–ª–µ—á–æ: {LEVERAGE}x\n"
                f"üí∞ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: {RISK_PERCENTAGE}%"
            )

            logging.info("–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
            while bot_running:
                if check_signals():
                    logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
                    await self.update_trading_data()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –≤—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É
                signal_data = read_json_file("signals.json")
                if signal_data.get("force_trade", False):
                    await self.process_signal(signal_data)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                if self.active_position:
                    current_price = await self.api.get_latest_price()
                    if current_price:
                        await self.update_trailing_stop(self.current_position, current_price)
                
                await self.check_pnl()
                await self.check_positions()
                await asyncio.sleep(CHECK_INTERVAL)
                
        except asyncio.CancelledError:
            logging.info("–ó–∞–¥–∞—á–∞ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            bot_running = False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}")
            await send_telegram_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
            bot_running = False
            raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        finally:
            if hasattr(self, 'position_watcher_task') and self.position_watcher_task:
                self.position_watcher_task.cancel()
            
            logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            await send_telegram_message("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True

    async def update_trading_data(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–µ, –ø–æ–∑–∏—Ü–∏—è—Ö –∏ PnL
        """
        try:
            current_time = time.time()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            if current_time - self.last_positions_update >= 300:
                logging.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...")
                balance_info = await self.api.get_wallet_balance(accountType="UNIFIED")
                logging.info(f"üìä –û—Ç–≤–µ—Ç API get_wallet_balance: {balance_info}")

                if balance_info and "result" in balance_info and "list" in balance_info["result"]:
                    wallet = balance_info["result"]["list"][0]
                    logging.info(f"üìä –î–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞: {wallet}")
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã
                    all_balances = {}
                    for coin in wallet.get("coin", []):
                        try:
                            coin_name = coin.get("coin", "")
                            if coin_name in ["USDT", "USD"]:
                                balance = float(coin.get("walletBalance", 0))
                                equity = float(coin.get("equity", 0))
                                unrealized_pnl = float(coin.get("unrealizedPnl", 0))
                                all_balances[coin_name] = {
                                    "balance": balance,
                                    "equity": equity,
                                    "unrealized_pnl": unrealized_pnl
                                }
                                logging.info(f"üìä –ë–∞–ª–∞–Ω—Å {coin_name}: {balance}, Equity: {equity}, Unrealized PnL: {unrealized_pnl}")
                        except (ValueError, TypeError) as e:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞–ª–∞–Ω—Å–∞ {coin_name}: {e}")
                            continue

                    # –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ USD –∏ USDT –±–∞–ª–∞–Ω—Å—ã
                    total_balance = sum(b["balance"] for b in all_balances.values())
                    total_equity = sum(b["equity"] for b in all_balances.values())
                    total_unrealized_pnl = sum(b["unrealized_pnl"] for b in all_balances.values())
                    
                    logging.info(f"üìä –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.2f}")
                    logging.info(f"üìä –û–±—â–∏–π equity: {total_equity:.2f}")
                    logging.info(f"üìä –û–±—â–∏–π unrealized PnL: {total_unrealized_pnl:.2f}")
                    
                    if total_balance > 0:
                        try:
                            balance_data = {
                                "balance": total_balance,
                                "equity": total_equity,
                                "unrealized_pnl": total_unrealized_pnl,
                                "used_margin": float(wallet.get("lockedBalance", 0)),
                                "free_margin": float(wallet.get("availableBalance", 0)),
                                "last_updated": datetime.now().isoformat(),
                                "details": {
                                    "USDT": all_balances.get("USDT", 0),
                                    "USD": all_balances.get("USD", 0)
                                }
                            }
                            
                            if update_json_file("balance.json", balance_data):
                                logging.info(f"‚úÖ balance.json –æ–±–Ω–æ–≤–ª–µ–Ω: {balance_data}")
                            else:
                                logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ balance.json")
                        except (ValueError, TypeError) as e:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞: {e}")
                    else:
                        logging.warning("‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                else:
                    logging.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
            if current_time - self.last_positions_update >= 60:
                logging.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π...")
                positions = await self.api.get_positions(category="linear", symbol=SYMBOL)
                if positions and positions.get("result", {}).get("list"):
                    self.positions = positions["result"]["list"][0]
                    self.last_positions_update = current_time
                    logging.info(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏: {self.positions}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
                    if update_json_file("positions.json", {"positions": self.positions}):
                        logging.info("‚úÖ positions.json –æ–±–Ω–æ–≤–ª–µ–Ω")
                    else:
                        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ positions.json")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º PnL –∫–∞–∂–¥—ã–µ 300 —Å–µ–∫—É–Ω–¥
            if current_time - self.last_pnl_update >= 300:
                logging.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ PnL...")
                pnl = await self.api.get_closed_pnl(category="linear", symbol=SYMBOL)
                if pnl and pnl.get("result", {}).get("list"):
                    self.pnl_data["trades"] = pnl["result"]["list"]
                    self.pnl_data["daily_pnl"] = sum(float(trade["closedPnl"]) for trade in pnl["result"]["list"])
                    self.last_pnl_update = current_time
                    logging.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω PnL: {self.pnl_data}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
                    if update_json_file("pnl.json", self.pnl_data):
                        logging.info("‚úÖ pnl.json –æ–±–Ω–æ–≤–ª–µ–Ω")
                    else:
                        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ pnl.json")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            logging.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã...")
            price = await self.api.get_latest_price()
            if price:
                price_data = {"price": price, "last_updated": datetime.now().isoformat()}
                if update_json_file("price.json", price_data):
                    logging.info(f"‚úÖ price.json –æ–±–Ω–æ–≤–ª–µ–Ω: {price}")
                else:
                    logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ price.json")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
            if self.signals["refresh_data"]:
                logging.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤...")
                self.signals["refresh_data"] = False
                self.signals["last_updated"] = datetime.now().isoformat()
                if update_json_file("signals.json", self.signals):
                    logging.info("‚úÖ signals.json –æ–±–Ω–æ–≤–ª–µ–Ω")
                else:
                    logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ signals.json")
                    
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            logging.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            logging.error(f"‚ùå –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")

    async def get_atr(self, period=14):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç ATR (Average True Range)"""
        try:
            candles = await self.api.get_kline(category="linear", symbol=SYMBOL, interval=5, limit=period)
            
            if "result" not in candles or "list" not in candles["result"]:
                logging.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π")
                return None

            highs = np.array([float(candle[2]) for candle in candles["result"]["list"]])
            lows = np.array([float(candle[3]) for candle in candles["result"]["list"]])
            closes = np.array([float(candle[4]) for candle in candles["result"]["list"]])

            if len(closes) < period:
                logging.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ATR. –ü–æ–ª—É—á–µ–Ω–æ {len(closes)} —Å–≤–µ—á–µ–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è {period}")
                return None

            atr = talib.ATR(highs, lows, closes, timeperiod=period)[-1]
            return atr
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ ATR: {e}")
            return None

    async def reset_daily_stats(self):
        today = datetime.now().date()
        if self.last_daily_reset != today:
            self.daily_pnl = 0
            self.daily_trade_count = 0
            self.last_daily_reset = today
            await send_telegram_message("üìä –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")

    async def check_pnl(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç PNL –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º
        """
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –Ω–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π –¥–µ–Ω—å
            await self.reset_daily_stats()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            current_time = time.time()
            if self.last_trade_time is None:
                self.last_trade_time = current_time - 300  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –º–∏–Ω—É—Ç
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            closed_orders = await self.api.get_closed_pnl(
                category="linear",
                symbol=SYMBOL,
                startTime=int(self.last_trade_time * 1000),
                endTime=int(current_time * 1000),
                limit=50
            )

            if not closed_orders or "result" not in closed_orders or "list" not in closed_orders["result"]:
                logging.info("‚ùå –ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π, PnL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                return True

            trades = closed_orders["result"]["list"]
            if not trades:
                logging.info("üìâ –ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫, PnL –ø–æ–∫–∞ –Ω—É–ª–µ–≤–æ–π.")
                return True

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫—Ä—ã—Ç—ã–π –æ—Ä–¥–µ—Ä
            for order in trades:
                order_id = order.get("orderId")
                if not order_id or order_id in self.processed_orders:
                    continue

                order_details = await self.api.get_order_list(
                    category="linear",
                    symbol=SYMBOL,
                    orderId=order_id
                )

                if not order_details or "result" not in order_details or "list" not in order_details["result"]:
                    logging.info(f"‚ö†Ô∏è –ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –æ—Ä–¥–µ—Ä–∞ {order_id}")
                    continue

                order_info = order_details["result"]["list"][0]
                side = order_info.get("side")
                qty = float(order_info.get("qty", 0))
                entry_price = float(order_info.get("price", 0))
                exit_price = float(order_info.get("closePrice", 0))
                pnl = float(order.get("closedPnl", 0))

                if side and qty > 0 and entry_price > 0 and exit_price > 0:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    self.daily_pnl += pnl
                    if pnl < 0:
                        self.consecutive_losses += 1
                    else:
                        self.consecutive_losses = 0

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    message = f"""
                    üéØ –ó–∞–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞:
                    –°—Ç–æ—Ä–æ–Ω–∞: {side}
                    –†–∞–∑–º–µ—Ä: {qty} {SYMBOL}
                    –í—Ö–æ–¥: {entry_price:.2f}
                    –í—ã—Ö–æ–¥: {exit_price:.2f}
                    PNL: {pnl:.2f} USDT
                    üìä –î–Ω–µ–≤–Ω–æ–π PNL: {self.daily_pnl:.2f} USDT
                    """
                    await send_telegram_message(message)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
                    if self.daily_pnl <= -100:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫ 100 USDT
                        error_msg = "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ —É–±—ã—Ç–∫–∞. –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
                        logging.warning(error_msg)
                        await send_telegram_message(error_msg)
                        return False

                    if self.consecutive_losses >= 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —É–±—ã—Ç–∫–∞
                        error_msg = "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —É–±—ã—Ç–∫–æ–≤. –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
                        logging.warning(error_msg)
                        await send_telegram_message(error_msg)
                        return False

                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                    self.processed_orders.add(order_id)
                    if len(self.processed_orders) > 50:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–∞
                        self.processed_orders = set(list(self.processed_orders)[-50:])

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.last_trade_time = current_time
            return True

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ PNL: {e}"
            logging.error(error_msg)
            await send_telegram_message(f"‚ö†Ô∏è {error_msg}")
            return False

    async def scalping_strategy(self):
        """
        –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞–∫–∞–Ω–∞, –æ–±—ä–µ–º–æ–≤ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ –Ω–∞ –¥–µ–Ω—å
            if self.daily_trade_count >= self.max_daily_trades:
                logging.info("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —Ä–∞–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            current_time = time.time()
            if current_time - self.last_order_time < self.min_order_interval:
                logging.info("–ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –≤—Ö–æ–¥–∞.")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            price = await self.get_latest_price()
            if price is None:
                return

            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –∏ –≤—ã—Ö–æ–¥–∏–º
            if self.last_checked_price is None:
                self.last_checked_price = price
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            if self.active_position:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                await self.update_trailing_stop(self.current_position, price)
                logging.info("–£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ö–æ–¥")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞
            atr = await self.get_atr()
            if atr:
                # –ï—Å–ª–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏
                if atr > price * 0.01:  # –ï—Å–ª–∏ ATR > 1% –æ—Ç —Ü–µ–Ω—ã
                    self.min_order_interval = 600  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 10 –º–∏–Ω—É—Ç
                    logging.info(f"–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR: {atr:.2f}), —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏")
            else:
                self.min_order_interval = 300  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ 5 –º–∏–Ω—É—Ç–∞–º

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã –∏ —Å—Ç–∞–∫–∞–Ω
            volume_direction = await self.analyze_volume()
            if volume_direction is None:
                logging.info("–ù–µ—Ç —á–µ—Ç–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –æ–±—ä–µ–º–∞–º")
                return

            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            long_term_levels = await self.analyze_long_term_levels()
            if not long_term_levels or "4H" not in long_term_levels:
                logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–Ω–¥ –∏ —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞
            trend_confirmed = await self.check_trend(volume_direction)
            if trend_confirmed:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
                if price < long_term_levels["4H"]["support"]:
                    logging.info("–¶–µ–Ω–∞ —É –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –í—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
                    return

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
                stop_loss = await self.calculate_stop_loss(volume_direction, price, atr)
                if not stop_loss:
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
                if not await self.check_stop_loss_distance(price, stop_loss):
                    return

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
                if volume_direction == "Buy":
                    take_profit_1 = price * (1 + TAKE_PROFIT_1 / 100)
                    take_profit_2 = price * (1 + TAKE_PROFIT_2 / 100)
                    take_profit_3 = price * (1 + TAKE_PROFIT_3 / 100)
                else:
                    take_profit_1 = price * (1 - TAKE_PROFIT_1 / 100)
                    take_profit_2 = price * (1 - TAKE_PROFIT_2 / 100)
                    take_profit_3 = price * (1 - TAKE_PROFIT_3 / 100)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –º–∞—Ä–∂–∏
                try:
                    account_info = await self.api.get_wallet_balance(accountType="UNIFIED")
                    if account_info and "result" in account_info and "list" in account_info["result"]:
                        balance_info = account_info["result"]["list"][0]
                        if "coin" in balance_info:
                            for item in balance_info["coin"]:
                                if item["coin"].upper() == "USDT":
                                    available_balance = float(item["walletBalance"])
                                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
                                    qty = await self.calculate_position_size(stop_loss, price)
                                    if qty is None:
                                        return
                                        
                                    required_margin = (price * qty) / LEVERAGE
                                    if available_balance < required_margin:
                                        logging.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ä–∂–∏: –¥–æ—Å—Ç—É–ø–Ω–æ {available_balance:.2f} USDT, —Ç—Ä–µ–±—É–µ—Ç—Å—è {required_margin:.2f} USDT")
                                        return
                                    break
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∞—Ä–∂–∏: {e}")
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
                if not await self.check_liquidity(volume_direction):
                    logging.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞")
                    return

                logging.info(f"–ü–ª–∞–Ω–∏—Ä—É–µ–º {volume_direction} –æ—Ä–¥–µ—Ä: qty={qty}, entry={price}, SL={stop_loss}")
                logging.info(f"–¶–µ–ª–∏: TP1={take_profit_1}, TP2={take_profit_2}, TP3={take_profit_3}")

                # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
                if await self.place_order(volume_direction, qty, stop_loss, take_profit_1, take_profit_2, take_profit_3):
                    self.active_position = True
                    self.last_order_time = current_time
                    self.daily_trade_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–¥–µ–ª–æ–∫
                    self.current_position = {
                        "side": volume_direction,
                        "entry_price": price,
                        "stop_loss": stop_loss,
                        "take_profit_1": take_profit_1,
                        "take_profit_2": take_profit_2,
                        "take_profit_3": take_profit_3,
                        "size": qty
                    }
                    await send_telegram_message(f"""
                    üéØ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è:
                    –°—Ç–æ—Ä–æ–Ω–∞: {volume_direction}
                    –†–∞–∑–º–µ—Ä: {qty} {SYMBOL}
                    –í—Ö–æ–¥: {price:.2f}
                    SL: {stop_loss:.2f}
                    TP1: {take_profit_1:.2f}
                    TP2: {take_profit_2:.2f}
                    TP3: {take_profit_3:.2f}
                    üìä ATR: {atr:.2f if atr else 'N/A'}
                    üìà –°–¥–µ–ª–∫–∞ {self.daily_trade_count} –∏–∑ {self.max_daily_trades}
                    """)
            else:
                logging.info("–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ü–µ–Ω—É
            self.last_checked_price = price
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤ scalping_strategy: {e}"
            logging.error(error_msg)
            await send_telegram_message(f"‚ö† {error_msg}")

    async def update_trailing_stop(self, position, current_price):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞
        """
        try:
            side = position["side"]
            current_stop = position["stop_loss"]

            if side == "Buy":
                new_stop = current_price * (1 - TRAILING_STOP / 100)
                if new_stop <= current_stop or ((new_stop - current_stop) / current_stop * 100) < 0.1:
                    return False
                await self.api.set_trading_stop(category="linear", symbol=SYMBOL, side="Buy", stopLoss=str(new_stop))
                position["stop_loss"] = new_stop
                return True

            else:
                new_stop = current_price * (1 + TRAILING_STOP / 100)
                if new_stop >= current_stop or ((current_stop - new_stop) / current_stop * 100) < 0.1:
                    return False
                await self.api.set_trading_stop(category="linear", symbol=SYMBOL, side="Sell", stopLoss=str(new_stop))
                position["stop_loss"] = new_stop
                return True

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞: {e}")
            return False

    async def check_trend(self, side):
        """
        –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏
            candles = await self.api.get_kline(category="linear", symbol=SYMBOL, interval="5", limit=50)
            if not candles or "result" not in candles or "list" not in candles["result"]:
                logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π")
                return False

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è - Bybit API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–µ—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞, –≥–¥–µ –∏–Ω–¥–µ–∫—Å 4 - —ç—Ç–æ —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            closes = [float(candle[4]) for candle in candles["result"]["list"]]
            if len(closes) < 50:
                logging.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return False

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            sma50 = talib.SMA(np.array(closes), timeperiod=50)[-1]
            rsi = talib.RSI(np.array(closes), timeperiod=RSI_PERIOD)[-1]
            vwap = await self.calculate_vwap()

            if not vwap:
                return False

            current_price = closes[-1]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ–¥–∏–Ω —Ä–∞–∑ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
            orderbook_signal = await self.analyze_orderbook(side)
            volume_signal = await self.analyze_volume()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Ö–æ–¥–∞
            if side == "Buy":
                # –£—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                buy_condition = (
                    current_price > sma50 and
                    current_price > vwap and
                    rsi < RSI_OVERSOLD and
                    orderbook_signal and
                    volume_signal == "Buy"
                )
                return buy_condition
            else:
                # –£—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                sell_condition = (
                    current_price < sma50 and
                    current_price < vwap and
                    rsi > RSI_OVERBOUGHT and
                    orderbook_signal and
                    volume_signal == "Sell"
                )
                return sell_condition
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ check_trend: {e}")
            return False

    async def check_liquidity(self, side):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ —Å—Ç–∞–∫–∞–Ω–µ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω
            orderbook = await self.api.get_orderbook(category="linear", symbol=SYMBOL)
            if not orderbook or "result" not in orderbook:
                logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞")
                return False

            # –°—É–º–º–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã –≤ –ø–µ—Ä–≤—ã—Ö 5 —É—Ä–æ–≤–Ω—è—Ö
            bids = sum([float(order["size"]) for order in orderbook["result"]["b"][:5]])
            asks = sum([float(order["size"]) for order in orderbook["result"]["a"][:5]])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤
            if side == "Buy":
                # –î–ª—è –ø–æ–∫—É–ø–∫–∏: –æ–±—ä–µ–º—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ
                return bids > asks * MIN_VOLUME_RATIO
            else:
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏: –æ–±—ä–µ–º—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ
                return asks > bids * MIN_VOLUME_RATIO
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {e}")
            return False

    async def calculate_trade_size(self, stop_loss_price, entry_price):
        try:
            # üî• –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å USDT
            account_info = await self.api.get_wallet_balance(accountType="UNIFIED")
            logging.info(f"API –æ—Ç–≤–µ—Ç get_wallet_balance: {account_info}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å USDT
            if account_info and "result" in account_info and "list" in account_info["result"]:
                balance_info = account_info["result"]["list"][0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ —Å–ø–∏—Å–∫–µ
                if "coin" in balance_info:
                    for item in balance_info["coin"]:
                        if item["coin"].upper() == "USDT":
                            balance = float(item["walletBalance"])
                            logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –±–∞–ª–∞–Ω—Å USDT: {balance} USDT")
                            break
                    else:
                        logging.error("USDT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–æ–≤.")
                        return None
                else:
                    logging.error("–û—à–∏–±–∫–∞: –∫–ª—é—á 'coin' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ API.")
                    return None
            else:
                logging.error("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")
                return None

            # üî¢ –†–∞—Å—Å—á—ë—Ç —Ä–∏—Å–∫–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ USDT
            risk_amount = balance * (RISK_PERCENTAGE / 100)  # –ö–∞–∫–æ–π % –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ —Å–¥–µ–ª–∫–µ
            stop_loss_distance = abs(entry_price - stop_loss_price)  # –î–∏—Å—Ç–∞–Ω—Ü–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞

            if stop_loss_distance == 0:
                logging.error("–û—à–∏–±–∫–∞: —Å—Ç–æ–ø-–ª–æ—Å—Å —Ä–∞–≤–µ–Ω –Ω—É–ª—é.")
                return None

            trade_size = risk_amount / stop_loss_distance  # –†–∞—Å—á—ë—Ç –±–∞–∑–æ–≤–æ–≥–æ –æ–±—ä—ë–º–∞ —Å–¥–µ–ª–∫–∏
            trade_size = round(trade_size, 3)  # ‚úÖ –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 0.001 BTC

            return trade_size if trade_size >= 0.001 else None  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–¥–µ–ª–∫–∏: {e}")
            return None

    async def check_stop_loss_distance(self, entry_price, stop_loss_price):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∏—Ä–∂–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã
            min_distance = MIN_STOP_DISTANCES.get(SYMBOL, 0.1)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            distance_percent = abs(entry_price - stop_loss_price) / entry_price * 100
            
            if distance_percent < min_distance:
                error_msg = f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ ({distance_percent:.2f}%) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ ({min_distance}%)"
                logging.warning(error_msg)
                await send_telegram_message(f"‚ö†Ô∏è {error_msg}")
                return False
                
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {e}")
            return False

    async def calculate_stop_loss(self, side, entry_price, atr=None):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã
            min_distance = MIN_STOP_DISTANCES.get(SYMBOL, 0.1)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR –∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            if atr:
                distance = atr * ATR_MULTIPLIER
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
                min_distance_price = entry_price * (min_distance / 100)
                distance = max(distance, min_distance_price)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
                distance = entry_price * (max(STOP_LOSS_PERCENTAGE, min_distance) / 100)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–æ—Ä–æ–Ω—ã
            stop_loss = entry_price - distance if side == "Buy" else entry_price + distance
            
            logging.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω —Å—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss:.2f} (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {(distance/entry_price*100):.2f}%)")
            return stop_loss
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {e}")
            return None

    async def analyze_orderbook(self, side):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞
        """
        try:
            orderbook = await self.api.get_orderbook(category="linear", symbol=SYMBOL, limit=ORDERBOOK_DEPTH)
            
            if "result" in orderbook:
                bids = orderbook["result"]["b"]
                asks = orderbook["result"]["a"]
                
                # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –æ–±—ä–µ–º –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É
                total_bids = sum(float(order["size"]) for order in bids)
                total_asks = sum(float(order["size"]) for order in asks)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä—É–ø–Ω—ã—Ö —Å—Ç–µ–Ω
                large_bids = sum(float(order["size"]) for order in bids if float(order["size"]) > VOLUME_THRESHOLD)
                large_asks = sum(float(order["size"]) for order in asks if float(order["size"]) > VOLUME_THRESHOLD)
                
                if side == "Buy":
                    return (total_bids > total_asks * MIN_VOLUME_RATIO and 
                           large_bids > large_asks * 1.5)
                else:
                    return (total_asks > total_bids * MIN_VOLUME_RATIO and 
                           large_asks > large_bids * 1.5)
            
            return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç–∞–∫–∞–Ω–∞: {e}")
            return False

    async def analyze_volume(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–ø—É–ª—å—Å–∞"""
        try:
            trades = await self.api.get_executions(category="linear", symbol=SYMBOL, limit=50)

            if "result" not in trades or "list" not in trades["result"]:
                logging.error("–û—à–∏–±–∫–∞: API Bybit –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö")
                return None

            buy_volume = 0
            sell_volume = 0

            for trade in trades["result"]["list"]:
                try:
                    size = float(trade["execQty"])  # –†–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏
                    side = trade["side"]  # Buy / Sell

                    if side == "Buy":
                        buy_volume += size
                    elif side == "Sell":
                        sell_volume += size
                except KeyError as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–¥–µ–ª–∫–∏: {e}")
                    continue

            if buy_volume > sell_volume * MIN_VOLUME_RATIO:
                return "Buy"
            elif sell_volume > buy_volume * MIN_VOLUME_RATIO:
                return "Sell"

            return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ–±—ä–µ–º–æ–≤: {e}")
            return None

    async def calculate_vwap(self):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç VWAP (Volume Weighted Average Price)
        """
        try:
            candles = await self.api.get_kline(category="linear", symbol=SYMBOL, interval=1, limit=VWAP_PERIOD)
            
            if "result" in candles and "list" in candles["result"]:
                total_volume = 0
                total_price_volume = 0
                
                for candle in candles["result"]["list"]:
                    volume = float(candle["volume"])
                    price = float(candle["close"])
                    total_volume += volume
                    total_price_volume += price * volume
                
                return total_price_volume / total_volume if total_volume > 0 else None
            return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ VWAP: {e}")
            return None

    async def calculate_position_size(self, account_balance, current_price, atr):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞ 1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        """
        try:
            if not account_balance or not current_price or not atr:
                return None

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (1% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)
            risk_amount = account_balance * 0.01
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º 0.5 ATR –∫–∞–∫ —Å—Ç–æ–ø-–ª–æ—Å—Å
            stop_distance = atr * 0.5
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            position_size = risk_amount / stop_distance
            
            # –û–∫—Ä—É–≥–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            position_size = round(position_size, 2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            min_size = 0.01
            if position_size < min_size:
                position_size = min_size
                
            return position_size

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return None

    TIMEFRAME_MAPPING = {
        "1D": "D",
        "1W": "W",
        "1M": "M"
    }

    async def fetch_historical_data(self, timeframe="1D", limit=200):
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è (close).
        """
        try:
            interval = self.TIMEFRAME_MAPPING.get(timeframe, "D")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "D" (–¥–µ–Ω—å)
            response = await self.api.get_kline(category="linear", symbol=SYMBOL, interval=interval, limit=limit)
            
            if "result" in response and "list" in response["result"]:
                closes = [float(candle[4]) for candle in response["result"]["list"]]
                if not closes:
                    logging.warning(f"‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ —Å–≤–µ—á–∏ –¥–ª—è {timeframe}")
                return closes

            logging.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {timeframe}")
            return []
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {timeframe}: {e}")
            return []

    async def get_support_resistance(self, closes):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –≤—ã–±—Ä–æ—Å–æ–≤.
        """
        if not closes or len(closes) < 10:
            return None, None

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤: —É–±–∏—Ä–∞–µ–º 5% —Å–∞–º—ã—Ö –Ω–∏–∑–∫–∏—Ö –∏ 5% —Å–∞–º—ã—Ö –≤—ã—Å–æ–∫–∏—Ö —Ü–µ–Ω
        lower_bound = np.percentile(closes, 5)
        upper_bound = np.percentile(closes, 95)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        support = min([price for price in closes if price >= lower_bound])
        resistance = max([price for price in closes if price <= upper_bound])

        return support, resistance

    async def market_structure_analysis(self, closes):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä—ã–Ω–∫–∞ (Higher Highs, Lower Lows).
        """
        if len(closes) < 10:
            return None

        highs = [closes[i] for i in range(1, len(closes) - 1) if closes[i] > closes[i - 1] and closes[i] > closes[i + 1]]
        lows = [closes[i] for i in range(1, len(closes) - 1) if closes[i] < closes[i - 1] and closes[i] < closes[i + 1]]

        last_high = highs[-1] if highs else None
        last_low = lows[-1] if lows else None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–≤–µ—á–µ–π
        trend = "–ë–æ–∫–æ–≤–∏–∫"
        if last_high and last_low:
            if last_high > last_low * 1.02:
                trend = "–ë—ã—á–∏–π —Ç—Ä–µ–Ω–¥ üü¢"
            elif last_low < last_high * 0.98:
                trend = "–ú–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥ üî¥"

        logging.info(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞: {trend}, High: {last_high}, Low: {last_low}")
        return trend, last_high, last_low

    async def perform_long_term_analysis(self):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞.
        """
        # üìä –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        closes_1D = await self.fetch_historical_data("1D", 200)
        closes_1W = await self.fetch_historical_data("1W", 100)
        closes_1M = await self.fetch_historical_data("1M", 50)

        # üèÜ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        support_1D, resistance_1D = await self.get_support_resistance(closes_1D)
        support_1W, resistance_1W = await self.get_support_resistance(closes_1W)
        support_1M, resistance_1M = await self.get_support_resistance(closes_1M)

        # üî• –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
        trend_1D = await self.analyze_trend(closes_1D)
        trend_1W = await self.analyze_trend(closes_1W)
        trend_1M = await self.analyze_trend(closes_1M)

        # üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã
        volume_trend = await self.analyze_volume()

        # üìâ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        market_trend_1D, last_high_1D, last_low_1D = await self.market_structure_analysis(closes_1D)

        # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logging.info(f"""
        üìä –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
        - 1D: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ {support_1D}, –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ {resistance_1D}, –¢—Ä–µ–Ω–¥: {trend_1D}, –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {market_trend_1D}
        - 1W: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ {support_1W}, –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ {resistance_1W}, –¢—Ä–µ–Ω–¥: {trend_1W}
        - 1M: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ {support_1M}, –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ {resistance_1M}, –¢—Ä–µ–Ω–¥: {trend_1M}
        - üî• –û–±—ä—ë–º–Ω—ã–π —Ç—Ä–µ–Ω–¥: {volume_trend}
        """)

        return {
            "support_resistance": {
                "1D": (support_1D, resistance_1D),
                "1W": (support_1W, resistance_1W),
                "1M": (support_1M, resistance_1M)
            },
            "trends": {
                "1D": trend_1D,
                "1W": trend_1W,
                "1M": trend_1M
            },
            "volume_trend": volume_trend,
            "market_structure": {
                "1D": (last_high_1D, last_low_1D, market_trend_1D)
            }
        }

    async def analyze_trend(self, closes):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SMA, EMA –∏ RSI.
        """
        if len(closes) < 50:
            logging.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞.")
            return None

        sma_50 = talib.SMA(np.array(closes), timeperiod=50)[-1]
        sma_200 = talib.SMA(np.array(closes), timeperiod=200)[-1]
        ema_21 = talib.EMA(np.array(closes), timeperiod=21)[-1]
        rsi = talib.RSI(np.array(closes), timeperiod=14)[-1]
        
        trend = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
        if sma_50 > sma_200 and ema_21 > sma_50:
            trend = "–ë—ã—á–∏–π üü¢"
        elif sma_50 < sma_200 and ema_21 < sma_50:
            trend = "–ú–µ–¥–≤–µ–∂–∏–π üî¥"
        
        logging.info(f"üìà –¢—Ä–µ–Ω–¥: {trend} (SMA50: {sma_50}, SMA200: {sma_200}, EMA21: {ema_21}, RSI: {rsi})")
        return trend

    async def analyze_long_term_levels(self):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        """
        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ—á–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
            candles_1H = await self.api.get_kline(category="linear", symbol=SYMBOL, interval="60", limit=100)
            candles_4H = await self.api.get_kline(category="linear", symbol=SYMBOL, interval="240", limit=100)
            candles_1D = await self.api.get_kline(category="linear", symbol=SYMBOL, interval="D", limit=100)

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
            def extract_closes(candles):
                if candles and "result" in candles and "list" in candles["result"] and candles["result"]["list"]:
                    return [float(candle[4]) for candle in reversed(candles["result"]["list"])]
                else:
                    return []

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            closes_1H = extract_closes(candles_1H)
            closes_4H = extract_closes(candles_4H)
            closes_1D = extract_closes(candles_1D)

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if closes_1H:
                logging.info(f"üßê –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π 1H: {closes_1H[-5:]}")
            if closes_4H:
                logging.info(f"üßê –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π 4H: {closes_4H[-5:]}")
            if closes_1D:
                logging.info(f"üßê –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π 1D: {closes_1D[-5:]}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if not closes_1H:
                logging.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω–µ–π –Ω–∞ 1H!")
            if not closes_4H:
                logging.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω–µ–π –Ω–∞ 4H!")
            if not closes_1D:
                logging.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω–µ–π –Ω–∞ 1D!")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            levels = {}

            if closes_1H:
                support_1H, resistance_1H = await self.detect_support_resistance(closes_1H)
                if support_1H and resistance_1H:
                    levels["1H"] = {"support": support_1H, "resistance": resistance_1H}
                    logging.info(f"üîµ 1H: Support: {support_1H:.2f}, Resistance: {resistance_1H:.2f}")

            if closes_4H:
                support_4H, resistance_4H = await self.detect_support_resistance(closes_4H)
                if support_4H and resistance_4H:
                    levels["4H"] = {"support": support_4H, "resistance": resistance_4H}
                    logging.info(f"üü¢ 4H: Support: {support_4H:.2f}, Resistance: {resistance_4H:.2f}")

            if closes_1D:
                support_1D, resistance_1D = await self.detect_support_resistance(closes_1D)
                if support_1D and resistance_1D:
                    levels["1D"] = {"support": support_1D, "resistance": resistance_1D}
                    logging.info(f"üî¥ 1D: Support: {support_1D:.2f}, Resistance: {resistance_1D:.2f}")

            return levels if levels else None

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π: {e}")
            return None

    async def detect_support_resistance(self, closes):
        """
        –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è.
        """
        try:
            if not closes or len(closes) < 10:
                return None, None
            
            high = max(closes)
            low = min(closes)
            return low, high
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è: {e}")
            return None, None

    async def check_positions(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–ª–∞–≥ active_position
        """
        try:
            positions = await self.api.get_positions()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ API
            if not positions or "result" not in positions or "list" not in positions["result"]:
                logging.info("üìâ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.")
                self.active_position = False
                self.current_position = None
                return True

            position_list = positions["result"]["list"]
            if not position_list:
                logging.info("üìâ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.")
                self.active_position = False
                self.current_position = None
                return True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
            for position in position_list:
                size = float(position.get("size", 0))
                side = position.get("side", "")
                
                if size == 0:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è
                if (self.current_position and 
                    self.current_position.get("side") == side and
                    abs(size - self.current_position.get("size", 0)) < 0.001):
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏
                    self.current_position.update({
                        "size": size,
                        "leverage": float(position.get("leverage", 0)),
                        "unrealized_pnl": float(position.get("unrealizedPnl", 0)),
                        "mark_price": float(position.get("markPrice", 0))
                    })
                    
                    self.active_position = True
                    logging.info(f"üîµ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {self.current_position}")
                    return True

            # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, –∑–Ω–∞—á–∏—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç
            self.active_position = False
            self.current_position = None
            logging.info("üìâ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.")
            return True

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–∑–∏—Ü–∏–π: {e}"
            logging.error(error_msg)
            await send_telegram_message(f"‚ö† {error_msg}")
            self.active_position = False
            self.current_position = None
            return False

    async def position_monitor(self):
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å
        """
        logging.info("–ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π")
        
        try:
            while not self.stop_monitor:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                positions = await self.api.get_positions(category="linear", symbol=SYMBOL)
                
                if positions and "result" in positions and "list" in positions["result"]:
                    position_list = positions["result"]["list"]
                    
                    if position_list and position_list[0]["size"] != "0":
                        position = position_list[0]
                        side = position["side"]
                        size = float(position["size"])
                        entry_price = float(position["entryPrice"])
                        position_value = float(position["positionValue"])
                        leverage = float(position["leverage"])
                        unrealized_pnl = float(position["unrealisedPnl"])
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                        current_price_data = await self.api.get_latest_price()
                        if current_price_data:
                            current_price = float(current_price_data)
                            
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
                            if side == "Buy":
                                pnl_percent = (current_price - entry_price) / entry_price * 100 * leverage
                            else:
                                pnl_percent = (entry_price - current_price) / entry_price * 100 * leverage
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏
                            logging.info(
                                f"–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {SYMBOL}: "
                                f"–°—Ç–æ—Ä–æ–Ω–∞: {side}, "
                                f"–†–∞–∑–º–µ—Ä: {size}, "
                                f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price}, "
                                f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}, "
                                f"P&L: {unrealized_pnl:.2f} USD ({pnl_percent:.2f}%)"
                            )
            
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
        except asyncio.CancelledError:
            logging.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø–æ–∑–∏—Ü–∏–π: {e}")
            await send_telegram_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø–æ–∑–∏—Ü–∏–π: {e}")

    async def monitor_positions(self):
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–æ–º –∏ —á–∞—Å—Ç–∏—á–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = await self.calculate_indicators()
            if not indicators:
                return

            current_price = float(indicators['last_close'])
            atr = float(indicators['ATR'][-1])

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            positions = read_json_file('positions.json')
            if not positions:
                return

            # –ï—Å–ª–∏ positions —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
            if isinstance(positions, dict):
                positions = [positions]

            for position in positions:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
                    close_size = await self.partial_close_position(position, current_price, atr)
                    if close_size:
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
                        order = await self.api.place_order(
                            category="linear",
                            symbol=SYMBOL,
                            side="Sell" if position['side'] == "Buy" else "Buy",
                            orderType="Market",
                            qty=str(close_size)
                        )

                        if "result" in order:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
                            position['size'] = float(position['size']) - close_size
                            if position['size'] <= 0:
                                positions.remove(position)
                            else:
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã –¥–ª—è –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏
                                sl_tp = await self.calculate_sl_tp(position['side'], current_price, atr)
                                if sl_tp:
                                    position['stopLoss'] = sl_tp['stop_loss']
                                    position['takeProfit1'] = sl_tp['take_profit_1']
                                    position['takeProfit2'] = sl_tp['take_profit_2']
                                    position['takeProfit3'] = sl_tp['take_profit_3']

                                # –û–±–Ω–æ–≤–ª—è–µ–º positions.json
                                update_json_file('positions.json', positions)

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                                message = f"üîÑ –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ {position['side']} –ø–æ–∑–∏—Ü–∏—è:\n"
                                message += f"–ó–∞–∫—Ä—ã—Ç–æ: {close_size}\n"
                                message += f"–û—Å—Ç–∞–ª–æ—Å—å: {position['size']}\n"
                                message += f"–¶–µ–Ω–∞: {current_price}"
                                await send_telegram_message(message)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø
                    new_stop = await self.update_trailing_stop(position, current_price, atr)
                    if new_stop and new_stop != position['stopLoss']:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
                        await self.api.set_stop_loss(
                            category="linear",
                            symbol=SYMBOL,
                            stopLoss=str(new_stop)
                        )
                        position['stopLoss'] = new_stop
                        update_json_file('positions.json', positions)

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        message = f"üìà –û–±–Ω–æ–≤–ª–µ–Ω —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –¥–ª—è {position['side']} –ø–æ–∑–∏—Ü–∏–∏:\n"
                        message += f"–ù–æ–≤—ã–π —Å—Ç–æ–ø: {new_stop}\n"
                        message += f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}"
                        await send_telegram_message(message)

                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø–æ–∑–∏—Ü–∏–∏: {e}")
                    continue

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø–æ–∑–∏—Ü–∏–π: {e}")

    async def calculate_indicators(self):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏
            candles = await self.api.get_kline(category="linear", symbol=SYMBOL, interval="5", limit=100)
            if not candles or "result" not in candles or "list" not in candles["result"]:
                logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π")
                return None

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ numpy –º–∞—Å—Å–∏–≤—ã
            closes = np.array([float(candle[4]) for candle in candles["result"]["list"]])
            highs = np.array([float(candle[2]) for candle in candles["result"]["list"]])
            lows = np.array([float(candle[3]) for candle in candles["result"]["list"]])
            volumes = np.array([float(candle[5]) for candle in candles["result"]["list"]])

            if len(closes) < 50:
                logging.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return None

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            rsi = talib.RSI(closes, timeperiod=14)[-1]
            atr = talib.ATR(highs, lows, closes, timeperiod=14)[-1]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º VWAP
            typical_price = (highs + lows + closes) / 3
            cumulative_vp = np.cumsum(typical_price * volumes)
            cumulative_volume = np.cumsum(volumes)
            vwap = cumulative_vp[-1] / cumulative_volume[-1]

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SMA –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
            sma20 = talib.SMA(closes, timeperiod=20)[-1]
            sma50 = talib.SMA(closes, timeperiod=50)[-1]

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            support_resistance = await self.get_support_resistance(closes)

            return {
                'RSI': rsi,
                'ATR': atr,
                'VWAP': vwap,
                'SMA20': sma20,
                'SMA50': sma50,
                'last_close': closes[-1],
                'last_high': highs[-1],
                'last_low': lows[-1],
                'last_volume': volumes[-1],
                'support_resistance': support_resistance
            }

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return None

    async def check_entry_conditions(self, indicators):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
        """
        try:
            if not indicators:
                return None

            price = indicators['last_close']
            vwap = indicators['VWAP']
            rsi = indicators['RSI']
            atr = indicators['ATR']
            sma20 = indicators['SMA20']
            sma50 = indicators['SMA50']
            volume = await self.analyze_volume()

            if not volume:
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            if (price > vwap and 
                rsi < 65 and 
                price > sma20 and 
                sma20 > sma50 and 
                volume == 'Buy'):
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±–ª–∏–∑–∫–æ –∫ —É—Ä–æ–≤–Ω—é —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                if indicators['support_resistance']:
                    resistance = indicators['support_resistance'].get('resistance', float('inf'))
                    if price < resistance - atr:
                        return 'Buy'

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
            if (price < vwap and 
                rsi > 35 and 
                price < sma20 and 
                sma20 < sma50 and 
                volume == 'Sell'):
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±–ª–∏–∑–∫–æ –∫ —É—Ä–æ–≤–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                if indicators['support_resistance']:
                    support = indicators['support_resistance'].get('support', 0)
                    if price > support + atr:
                        return 'Sell'

            return None

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞: {e}")
            return None

    async def calculate_sl_tp(self, side, price, atr):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
        """
        try:
            if side == 'Buy':
                # –°—Ç–æ–ø-–ª–æ—Å—Å: –º–∏–Ω–∏–º—É–º –ø—Ä–æ—à–ª–æ–π —Å–≤–µ—á–∏ –∏–ª–∏ 0.5 ATR
                stop_loss = price - atr * 0.5
                
                # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã: 1 ATR, 2 ATR –∏ 3 ATR
                take_profit_1 = price + atr
                take_profit_2 = price + atr * 2
                take_profit_3 = price + atr * 3
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
                min_distance = MIN_STOP_DISTANCES.get(SYMBOL, 0.1)
                min_stop_distance = price * (min_distance / 100)
                if (price - stop_loss) < min_stop_distance:
                    stop_loss = price - min_stop_distance
                    
            else:  # Sell
                # –°—Ç–æ–ø-–ª–æ—Å—Å: –º–∞–∫—Å–∏–º—É–º –ø—Ä–æ—à–ª–æ–π —Å–≤–µ—á–∏ –∏–ª–∏ 0.5 ATR
                stop_loss = price + atr * 0.5
                
                # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã: 1 ATR, 2 ATR –∏ 3 ATR
                take_profit_1 = price - atr
                take_profit_2 = price - atr * 2
                take_profit_3 = price - atr * 3
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
                min_distance = MIN_STOP_DISTANCES.get(SYMBOL, 0.1)
                min_stop_distance = price * (min_distance / 100)
                if (stop_loss - price) < min_stop_distance:
                    stop_loss = price + min_stop_distance

            return {
                'stop_loss': stop_loss,
                'take_profit_1': take_profit_1,
                'take_profit_2': take_profit_2,
                'take_profit_3': take_profit_3
            }

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ SL/TP: {e}")
            return None

    async def update_trailing_stop(self, position, current_price, atr):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∏ ATR
        """
        try:
            if not position or not current_price or not atr:
                return None

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å
            current_stop = float(position.get('stopLoss', 0))
            entry_price = float(position.get('entryPrice', 0))
            unrealized_pnl = float(position.get('unrealisedPnl', 0))
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—Ç–æ–ø–∞ –≤ ATR
            if position['side'] == 'Buy':
                distance_to_stop = (current_price - current_stop) / atr
                # –ï—Å–ª–∏ –ø—Ä–∏–±—ã–ª—å –±–æ–ª—å—à–µ 0.75 ATR, –¥–≤–∏–≥–∞–µ–º —Å—Ç–æ–ø –≤ –±–µ–∑—É–±—ã—Ç–æ–∫
                if distance_to_stop > 0.75:
                    new_stop = entry_price
                    if new_stop > current_stop:
                        return new_stop
            else:  # Sell
                distance_to_stop = (current_stop - current_price) / atr
                # –ï—Å–ª–∏ –ø—Ä–∏–±—ã–ª—å –±–æ–ª—å—à–µ 0.75 ATR, –¥–≤–∏–≥–∞–µ–º —Å—Ç–æ–ø –≤ –±–µ–∑—É–±—ã—Ç–æ–∫
                if distance_to_stop > 0.75:
                    new_stop = entry_price
                    if new_stop < current_stop:
                        return new_stop

            return current_stop

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞: {e}")
            return None

    async def partial_close_position(self, position, current_price, atr):
        """
        –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤
        """
        try:
            if not position or not current_price or not atr:
                return None

            side = position['side']
            size = float(position['size'])
            entry_price = float(position['entryPrice'])
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –≤—Ö–æ–¥–∞ –≤ ATR
            if side == 'Buy':
                distance = (current_price - entry_price) / atr
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º 50% –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 1 ATR
                if distance >= 1.0 and size > 0.5:
                    close_size = size * 0.5
                    return close_size
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –µ—â–µ 25% –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 2 ATR
                elif distance >= 2.0 and size > 0.25:
                    close_size = size * 0.25
                    return close_size
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è 25% –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 3 ATR
                elif distance >= 3.0 and size > 0:
                    close_size = size
                    return close_size
            else:  # Sell
                distance = (entry_price - current_price) / atr
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º 50% –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 1 ATR
                if distance >= 1.0 and size > 0.5:
                    close_size = size * 0.5
                    return close_size
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –µ—â–µ 25% –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 2 ATR
                elif distance >= 2.0 and size > 0.25:
                    close_size = size * 0.25
                    return close_size
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è 25% –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 3 ATR
                elif distance >= 3.0 and size > 0:
                    close_size = size
                    return close_size

            return None

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á–∞—Å—Ç–∏—á–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return None

    async def execute_trade(self, side):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = await self.calculate_indicators()
            if not indicators:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
                return False

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ ATR
            current_price = float(indicators['last_close'])
            atr = float(indicators['ATR'][-1])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞
            entry_conditions = await self.check_entry_conditions(indicators)
            if not entry_conditions or entry_conditions != side:
                logging.info(f"–£—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ {side} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
            account_info = await self.api.get_wallet_balance(accountType="UNIFIED")
            if "result" not in account_info or "list" not in account_info["result"]:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT
            available_balance = None
            for coin in account_info["result"]["list"][0].get("coin", []):
                if coin["coin"].upper() == "USDT":
                    available_balance = float(coin["availableBalance"])
                    break

            if available_balance is None:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å USDT")
                return False

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            position_size = await self.calculate_position_size(available_balance, current_price, atr)
            if not position_size:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
                return False

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
            sl_tp = await self.calculate_sl_tp(side, current_price, atr)
            if not sl_tp:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å SL/TP")
                return False

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            order = await self.api.place_order(
                category="linear",
                symbol=SYMBOL,
                side=side,
                orderType="Market",
                qty=str(position_size),
                stopLoss=str(sl_tp['stop_loss']),
                takeProfit=str(sl_tp['take_profit_1'])
            )

            if "result" not in order:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {order}")
                return False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏
            position_info = {
                'symbol': SYMBOL,
                'side': side,
                'size': position_size,
                'entryPrice': current_price,
                'stopLoss': sl_tp['stop_loss'],
                'takeProfit1': sl_tp['take_profit_1'],
                'takeProfit2': sl_tp['take_profit_2'],
                'takeProfit3': sl_tp['take_profit_3'],
                'timestamp': int(time.time() * 1000)
            }

            # –û–±–Ω–æ–≤–ª—è–µ–º positions.json
            positions = read_json_file('positions.json')
            if isinstance(positions, dict):
                positions = [positions]
            positions.append(position_info)
            update_json_file('positions.json', positions)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            message = f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ {side} –ø–æ–∑–∏—Ü–∏—è:\n"
            message += f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {current_price}\n"
            message += f"–†–∞–∑–º–µ—Ä: {position_size}\n"
            message += f"–°—Ç–æ–ø-–ª–æ—Å—Å: {sl_tp['stop_loss']}\n"
            message += f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã: {sl_tp['take_profit_1']}, {sl_tp['take_profit_2']}, {sl_tp['take_profit_3']}"
            await send_telegram_message(message)

            return True

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
            return False

def initialize_json_files():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç JSON —Ñ–∞–π–ª—ã —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è balance.json
        if not os.path.exists('balance.json'):
            balance_data = {
                "balance": 0,
                "equity": 0,
                "unrealized_pnl": 0,
                "used_margin": 0,
                "free_margin": 0,
                "last_updated": datetime.now().isoformat(),
                "details": {
                    "USDT": 0,
                    "USD": 0
                }
            }
            update_json_file('balance.json', balance_data)
            logging.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª balance.json")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è indicators.json
        if not os.path.exists('indicators.json'):
            indicators_data = {
                "vwap": 0,
                "rsi": 0,
                "atr": 0,
                "sma": 0,
                "support": 0,
                "resistance": 0,
                "last_updated": datetime.now().isoformat()
            }
            update_json_file('indicators.json', indicators_data)
            logging.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª indicators.json")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è positions.json
        if not os.path.exists('positions.json'):
            positions_data = {
                "positions": [],
                "last_updated": datetime.now().isoformat()
            }
            update_json_file('positions.json', positions_data)
            logging.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª positions.json")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pnl.json
        if not os.path.exists('pnl.json'):
            pnl_data = {
                "daily": 0,
                "trades": [],
                "last_updated": datetime.now().isoformat()
            }
            update_json_file('pnl.json', pnl_data)
            logging.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª pnl.json")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è price.json
        if not os.path.exists('price.json'):
            price_data = {
                "price": 0,
                "last_updated": datetime.now().isoformat()
            }
            update_json_file('price.json', price_data)
            logging.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª price.json")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è signals.json
        if not os.path.exists('signals.json'):
            signals_data = {
                "refresh_data": False,
                "last_updated": datetime.now().isoformat()
            }
            update_json_file('signals.json', signals_data)
            logging.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª signals.json")

        logging.info("‚úÖ –í—Å–µ JSON —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON —Ñ–∞–π–ª–æ–≤: {e}")
        return False

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    global bot_running
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s [%(levelname)s] %(message)s',
        handlers=[
            logging.FileHandler('trading_bot.log'),
            logging.StreamHandler()
        ]
    )
    
    logging.info("–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º JSON —Ñ–∞–π–ª—ã
    if not initialize_json_files():
        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å JSON —Ñ–∞–π–ª—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤–Ω—É—Ç—Ä–∏ event loop
    bot = TradingBot()
    bot_running = True
    
    try:
        await bot.run()
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        bot_running = False
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        bot_running = False
    finally:
        bot_running = False
        logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")

if __name__ == "__main__":
    asyncio.run(main())
