import asyncio
import sys
import json
from datetime import datetime

# ‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É "aiodns needs a SelectorEventLoop on Windows"
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram import Router
from dotenv import load_dotenv
import os
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_bot.log'),
        logging.StreamHandler()
    ]
)

load_dotenv()
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
SYMBOL = os.getenv("SYMBOL", "BTCUSDT")

if not all([TELEGRAM_CHAT_ID, TELEGRAM_BOT_TOKEN]):
    logging.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –≤ .env —Ñ–∞–π–ª–µ")
    sys.exit(1)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot=bot, storage=MemoryStorage())
router = Router()

# üìå –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏", callback_data="open_positions")],
    [InlineKeyboardButton(text="üí∞ PnL –∑–∞ –¥–µ–Ω—å –∏ —Å–¥–µ–ª–∫—É", callback_data="pnl_info")],
    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="refresh_data")],
    [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data="buy")],
    [InlineKeyboardButton(text="üìâ –ü—Ä–æ–¥–∞—Ç—å", callback_data="sell")],
    [InlineKeyboardButton(text="üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã", callback_data="indicators")],
    [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
    [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
])

# –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
commands_keyboard = types.ReplyKeyboardMarkup(
    keyboard=[
        [
            types.KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å"),
            types.KeyboardButton(text="üìÇ –ü–æ–∑–∏—Ü–∏–∏")
        ],
        [
            types.KeyboardButton(text="üí∞ PnL"),
            types.KeyboardButton(text="üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
        ],
        [
            types.KeyboardButton(text="üõí –ö—É–ø–∏—Ç—å"),
            types.KeyboardButton(text="üìâ –ü—Ä–æ–¥–∞—Ç—å")
        ],
        [
            types.KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"),
            types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        ]
    ],
    resize_keyboard=True
)

def read_json_file(filename: str) -> dict:
    """–ß–∏—Ç–∞–µ—Ç JSON —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞—ë—Ç –µ–≥–æ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    try:
        with open(filename, 'r') as f:
            data = json.load(f)
        
        # üî• –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        logging.info(f"üìÇ –î–∞–Ω–Ω—ã–µ –∏–∑ {filename}: {data}")
        return data
    except FileNotFoundError:
        logging.warning(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π.")
        # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        default_data = {}
        if filename == 'balance.json':
            default_data = {
                "balance": 0,
                "used_margin": 0,
                "free_margin": 0,
                "last_updated": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            }
        elif filename == 'price.json':
            default_data = {"price": 0}
        elif filename == 'positions.json':
            default_data = {"positions": [], "last_updated": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
        elif filename == 'pnl.json':
            default_data = {"daily": 0, "trades": [], "last_updated": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
        
        with open(filename, 'w') as f:
            json.dump(default_data, f, indent=2)
        return default_data
    except json.JSONDecodeError:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –∏–∑ —Ñ–∞–π–ª–∞ {filename}, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.")
        with open(filename, 'w') as f:
            json.dump({}, f)
        return {}

def write_json_file(filename: str, data: dict) -> bool:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(filename, 'w') as f:
            json.dump(data, f, indent=2)
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª {filename}: {e}")
        return False

def update_json_file(filename: str, data: dict) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç JSON —Ñ–∞–π–ª, –¥–æ–±–∞–≤–ª—è—è –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∫ –¥–∞–Ω–Ω—ã–º
        data['last_updated'] = datetime.now().isoformat()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(filename, 'w') as f:
            json.dump(data, f, indent=2)
            
        logging.info(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
        return False

def format_positions(positions: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    if not positions:
        return "üìÇ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
    
    message = "üìÇ –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n"
    
    # –ï—Å–ª–∏ positions —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å (–æ–¥–Ω–∞ –ø–æ–∑–∏—Ü–∏—è)
    if isinstance(positions, dict):
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤
            symbol = positions.get('symbol', 'Unknown')
            side = positions.get('side', 'Unknown')
            qty = float(positions.get('size', 0))
            entry = float(positions.get('avgPrice', 0))
            leverage = int(positions.get('leverage', 1))
            unrealized_pnl = float(positions.get('unrealisedPnl', 0))
            stop_loss = float(positions.get('stopLoss', 0))
            take_profit_1 = float(positions.get('takeProfit1', 0))
            take_profit_2 = float(positions.get('takeProfit2', 0))
            take_profit_3 = float(positions.get('takeProfit3', 0))
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            if qty == 0 or not side:
                logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø—É—Å—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è: {positions}")
                return "üìÇ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
            
            message += f"üîπ {symbol}: {side} {qty} @ {entry:.2f} (x{leverage})\n"
            message += f"   üìä PnL: {unrealized_pnl:.2f} USDT\n"
            message += f"   üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss:.2f}\n"
            message += f"   üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã:\n"
            message += f"      TP1: {take_profit_1:.2f}\n"
            message += f"      TP2: {take_profit_2:.2f}\n"
            message += f"      TP3: {take_profit_3:.2f}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–µ
            if positions.get('trailing_stop'):
                message += f"   üìà –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø: {positions['trailing_stop']:.2f}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç–∏—á–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
            if positions.get('partial_closes'):
                message += f"   üîÑ –ß–∞—Å—Ç–∏—á–Ω—ã–µ –∑–∞–∫—Ä—ã—Ç–∏—è:\n"
                for close in positions['partial_closes']:
                    message += f"      {close['size']} @ {close['price']:.2f}\n"
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return "üìÇ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
    
    # –ï—Å–ª–∏ positions —ç—Ç–æ —Å–ø–∏—Å–æ–∫ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π)
    elif isinstance(positions, list):
        for pos in positions:
            try:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤
                symbol = pos.get('symbol', 'Unknown')
                side = pos.get('side', 'Unknown')
                qty = float(pos.get('size', 0))
                entry = float(pos.get('avgPrice', 0))
                leverage = int(pos.get('leverage', 1))
                unrealized_pnl = float(pos.get('unrealisedPnl', 0))
                stop_loss = float(pos.get('stopLoss', 0))
                take_profit_1 = float(pos.get('takeProfit1', 0))
                take_profit_2 = float(pos.get('takeProfit2', 0))
                take_profit_3 = float(pos.get('takeProfit3', 0))
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                if qty == 0 or not side:
                    logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø—É—Å—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è: {pos}")
                    continue
                
                message += f"üîπ {symbol}: {side} {qty} @ {entry:.2f} (x{leverage})\n"
                message += f"   üìä PnL: {unrealized_pnl:.2f} USDT\n"
                message += f"   üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss:.2f}\n"
                message += f"   üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã:\n"
                message += f"      TP1: {take_profit_1:.2f}\n"
                message += f"      TP2: {take_profit_2:.2f}\n"
                message += f"      TP3: {take_profit_3:.2f}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–µ
                if pos.get('trailing_stop'):
                    message += f"   üìà –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø: {pos['trailing_stop']:.2f}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç–∏—á–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
                if pos.get('partial_closes'):
                    message += f"   üîÑ –ß–∞—Å—Ç–∏—á–Ω—ã–µ –∑–∞–∫—Ä—ã—Ç–∏—è:\n"
                    for close in pos['partial_closes']:
                        message += f"      {close['size']} @ {close['price']:.2f}\n"
                
                message += "\n"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
                continue
    
    return message if message != "üìÇ –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n" else "üìÇ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"

def format_pnl(pnl_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç PnL –¥–∞–Ω–Ω—ã–µ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    try:
        # ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ float
        daily_pnl = float(pnl_data.get('daily', 0))
        trades = pnl_data.get('trades', [])

        message = f"üí∞ –î–Ω–µ–≤–Ω–æ–π PnL: {daily_pnl:.2f} USDT\n\n"

        if trades:
            message += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:\n"
            for trade in trades[:5]:  # ‚úÖ –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
                try:
                    symbol = trade.get('symbol', 'Unknown')
                    pnl = float(trade.get('closedPnl', 0))  # üî• –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float
                    side = trade.get('side', 'Unknown')
                    entry_price = float(trade.get('avgEntryPrice', 0))  # üî• –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
                    exit_price = float(trade.get('avgExitPrice', 0))  # üî• –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –≤—ã—Ö–æ–¥–∞

                    if symbol and pnl is not None:
                        message += f"üî∏ {symbol} ({side}):\n"
                        message += f"   PnL: {pnl:.2f} USDT\n"
                        message += f"   –í—Ö–æ–¥: {entry_price:.2f} | –í—ã—Ö–æ–¥: {exit_price:.2f}\n"
                    else:
                        logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {trade}")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
                    continue
        else:
            message += "–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"

        return message
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ PnL: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ PnL"

def format_indicators(indicators: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    try:
        message = "üìä –¢–µ–∫—É—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:\n\n"
        
        # –¶–µ–Ω–∞ –∏ VWAP
        message += f"üí∞ –¶–µ–Ω–∞: {indicators['last_close']:.2f}\n"
        message += f"üìà VWAP: {indicators['VWAP']:.2f}\n"
        
        # RSI
        message += f"üìä RSI: {indicators['RSI']:.2f}\n"
        
        # ATR
        message += f"üìè ATR: {indicators['ATR']:.2f}\n"
        
        # SMA
        message += f"üìâ SMA20: {indicators['SMA20']:.2f}\n"
        message += f"üìâ SMA50: {indicators['SMA50']:.2f}\n"
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ
        if indicators.get('support'):
            message += f"üõë –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {indicators['support']:.2f}\n"
        if indicators.get('resistance'):
            message += f"üéØ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {indicators['resistance']:.2f}\n"
        
        return message
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [InlineKeyboardButton("üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã", callback_data="indicators")],
        [InlineKeyboardButton("üìà –ü–æ–∑–∏—Ü–∏–∏", callback_data="positions")],
        [InlineKeyboardButton("üõë –°—Ç–æ–ø-–ª–æ—Å—Å", callback_data="stop_loss")],
        [InlineKeyboardButton("üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç", callback_data="take_profit")],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("üìâ –ì—Ä–∞—Ñ–∏–∫", callback_data="chart")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="refresh_data")]
    ]
    return InlineKeyboardMarkup(keyboard)

@dp.callback_query(F.data == "open_positions")
async def open_positions_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    try:
        data = read_json_file('positions.json')
        positions = data.get('positions', [])
        message = format_positions(positions)
        if data.get('last_updated'):
            message += f"\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {data['last_updated']}"
            
        await callback.message.answer(message)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π")
    finally:
        await callback.answer()

@dp.callback_query(F.data == "pnl_info")
async def pnl_info_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ PnL"""
    try:
        pnl_data = read_json_file('pnl.json')
        message = format_pnl(pnl_data)
        if pnl_data.get('last_updated'):
            message += f"\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {pnl_data['last_updated']}"
            
        await callback.message.answer(message)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ PnL: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ PnL")
    finally:
        await callback.answer()

@dp.callback_query(F.data == "refresh_data")
async def refresh_data_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö JSON —Ñ–∞–π–ª–æ–≤"""
    try:
        await callback.answer("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        balance_info = await bot.api.get_wallet_balance(accountType="UNIFIED")
        if balance_info and "result" in balance_info and "list" in balance_info["result"]:
            wallet = balance_info["result"]["list"][0]
            balance_data = {
                "balance": float(wallet.get("totalWalletBalance", 0)),
                "equity": float(wallet.get("totalEquity", 0)),
                "unrealized_pnl": float(wallet.get("totalUnrealizedPnl", 0)),
                "used_margin": float(wallet.get("totalUsedMargin", 0)),
                "free_margin": float(wallet.get("totalAvailableBalance", 0)),
                "last_updated": datetime.now().isoformat()
            }
            update_json_file("balance.json", balance_data)
            logging.info("‚úÖ balance.json –æ–±–Ω–æ–≤–ª–µ–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        positions = await bot.api.get_positions(category="linear", symbol=SYMBOL)
        if positions and positions.get("result", {}).get("list"):
            positions_data = {"positions": positions["result"]["list"], "last_updated": datetime.now().isoformat()}
            update_json_file("positions.json", positions_data)
            logging.info("‚úÖ positions.json –æ–±–Ω–æ–≤–ª–µ–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º PnL
        pnl = await bot.api.get_closed_pnl(category="linear", symbol=SYMBOL)
        if pnl and pnl.get("result", {}).get("list"):
            pnl_data = {
                "trades": pnl["result"]["list"],
                "daily_pnl": sum(float(trade["closedPnl"]) for trade in pnl["result"]["list"]),
                "last_updated": datetime.now().isoformat()
            }
            update_json_file("pnl.json", pnl_data)
            logging.info("‚úÖ pnl.json –æ–±–Ω–æ–≤–ª–µ–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        price = await bot.api.get_latest_price()
        if price:
            price_data = {"price": price, "last_updated": datetime.now().isoformat()}
            update_json_file("price.json", price_data)
            logging.info("‚úÖ price.json –æ–±–Ω–æ–≤–ª–µ–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = await bot.calculate_indicators()
        if indicators:
            indicators["last_updated"] = datetime.now().isoformat()
            update_json_file("indicators.json", indicators)
            logging.info("‚úÖ indicators.json –æ–±–Ω–æ–≤–ª–µ–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signals_data = {
            "refresh_data": False,
            "last_updated": datetime.now().isoformat()
        }
        update_json_file("signals.json", signals_data)
        logging.info("‚úÖ signals.json –æ–±–Ω–æ–≤–ª–µ–Ω")

        await callback.message.edit_text(
            "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n"
            "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: " + datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        logging.error(error_msg)
        await callback.message.edit_text(
            error_msg,
            reply_markup=get_main_keyboard()
        )

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=commands_keyboard
    )

@dp.message(F.text == "üìä –°—Ç–∞—Ç—É—Å")
async def status_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    await check_status(message)

@dp.message(F.text == "üìÇ –ü–æ–∑–∏—Ü–∏–∏")
async def positions_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∑–∏—Ü–∏–π"""
    try:
        data = read_json_file('positions.json')
        positions = data.get('positions', [])
        message_text = format_positions(positions)
        if data.get('last_updated'):
            message_text += f"\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {data['last_updated']}"
            
        await message.answer(message_text)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π")

@dp.message(F.text == "üí∞ PnL")
async def pnl_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ PnL"""
    try:
        pnl_data = read_json_file('pnl.json')
        message_text = format_pnl(pnl_data)
        if pnl_data.get('last_updated'):
            message_text += f"\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {pnl_data['last_updated']}"
            
        await message.answer(message_text)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ PnL: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ PnL")

@dp.message(F.text == "üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
async def indicators_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    try:
        indicators = read_json_file('indicators.json')
        message_text = format_indicators(indicators)
        if indicators.get('last_updated'):
            message_text += f"\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {indicators['last_updated']}"
            
        await message.answer(message_text)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")

@dp.message(F.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
async def refresh_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    try:
        signals = {"refresh_data": True, "last_signal": datetime.now().isoformat()}
        if write_json_file('signals.json', signals):
            await message.answer("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

@dp.message(F.text == "üõí –ö—É–ø–∏—Ç—å")
async def buy_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = read_json_file('indicators.json')
        if not indicators:
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤. –ù–∞–∂–º–∏—Ç–µ /–û–±–Ω–æ–≤–∏—Ç—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Ö–æ–¥–∞
        if indicators.get('RSI', 0) > 65:
            await message.answer("‚ùå RSI —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π (>65). –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—Ö–æ–¥–∏—Ç—å –≤ –¥–ª–∏–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é.")
            return
            
        if indicators.get('last_close', 0) < indicators.get('VWAP', 0):
            await message.answer("‚ùå –¶–µ–Ω–∞ –Ω–∏–∂–µ VWAP. –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—Ö–æ–¥–∏—Ç—å –≤ –¥–ª–∏–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é.")
            return
            
        # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É
        signal_data = {
            "force_trade": True,
            "side": "Buy",
            "price": indicators['last_close'],
            "last_signal": datetime.now().isoformat()
        }
        
        if write_json_file('signals.json', signal_data):
            await message.answer(f"‚úÖ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ —Ü–µ–Ω–µ {indicators['last_close']:.2f}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–∞")

@dp.message(F.text == "üìâ –ü—Ä–æ–¥–∞—Ç—å")
async def sell_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–∞–∂–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = read_json_file('indicators.json')
        if not indicators:
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤. –ù–∞–∂–º–∏—Ç–µ /–û–±–Ω–æ–≤–∏—Ç—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Ö–æ–¥–∞
        if indicators.get('RSI', 0) < 35:
            await message.answer("‚ùå RSI —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π (<35). –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—Ö–æ–¥–∏—Ç—å –≤ –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–∑–∏—Ü–∏—é.")
            return
            
        if indicators.get('last_close', 0) > indicators.get('VWAP', 0):
            await message.answer("‚ùå –¶–µ–Ω–∞ –≤—ã—à–µ VWAP. –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—Ö–æ–¥–∏—Ç—å –≤ –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–∑–∏—Ü–∏—é.")
            return
            
        # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
        signal_data = {
            "force_trade": True,
            "side": "Sell",
            "price": indicators['last_close'],
            "last_signal": datetime.now().isoformat()
        }
        
        if write_json_file('signals.json', signal_data):
            await message.answer(f"‚úÖ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ —Ü–µ–Ω–µ {indicators['last_close']:.2f}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–æ–¥–∞–∂–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–∞")

@dp.message(Command("status"))
async def check_status(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        balance_data = read_json_file('balance.json')
        if not balance_data:
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            return

        balance = balance_data.get('balance', 0)
        used_margin = balance_data.get('used_margin', 0)
        free_margin = balance_data.get('free_margin', 0)
        last_updated = balance_data.get('last_updated', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        status_message = f"""
        üìä –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞:
        üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} USDT
        üîí –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞: {used_margin:.2f} USDT
        üíµ –°–≤–æ–±–æ–¥–Ω–∞—è –º–∞—Ä–∂–∞: {free_margin:.2f} USDT
        ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}
        """
        await message.answer(status_message)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞")

@dp.message(Command("buy"))
async def force_buy(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–ª–∏–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        price_data = read_json_file('price.json')
        current_price = float(price_data.get('price', 0))

        if current_price <= 0:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            return

        stop_loss = current_price * 0.995
        take_profit_1 = current_price * 1.005
        take_profit_2 = current_price * 1.01
        take_profit_3 = current_price * 1.015

        signal = {
            "force_trade": True,
            "side": "Buy",
            "price": current_price,
            "stop_loss": stop_loss,
            "take_profit_1": take_profit_1,
            "take_profit_2": take_profit_2,
            "take_profit_3": take_profit_3,
            "qty": 0.001
        }

        if write_json_file('signals.json', signal):
            await message.answer(f"‚úÖ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {current_price:.2f}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏")

@dp.message(Command("sell"))
async def force_sell(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        price_data = read_json_file('price.json')
        current_price = float(price_data.get('price', 0))

        if current_price <= 0:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            return

        stop_loss = current_price * 1.005
        take_profit_1 = current_price * 0.995
        take_profit_2 = current_price * 0.99
        take_profit_3 = current_price * 0.985

        signal = {
            "force_trade": True,
            "side": "Sell",
            "price": current_price,
            "stop_loss": stop_loss,
            "take_profit_1": take_profit_1,
            "take_profit_2": take_profit_2,
            "take_profit_3": take_profit_3,
            "qty": 0.001
        }

        if write_json_file('signals.json', signal):
            await message.answer(f"‚úÖ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {current_price:.2f}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏")

@dp.callback_query(F.data.startswith('sl_'))
async def stop_loss_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
    try:
        symbol = callback.data.split('_')[1]
        positions = bot.trading_bot.get_positions()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –ø–æ —Å–∏–º–≤–æ–ª—É
        position = None
        for pos in positions:
            if pos.get('symbol') == symbol:
                position = pos
                break
                
        if not position:
            await callback.answer("‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π ATR
        indicators = bot.trading_bot.calculate_indicators()
        if not indicators:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ATR")
            return
            
        atr = indicators['ATR']
        current_price = indicators['last_close']
        current_sl = float(position.get('stopLoss', 0))
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            f"0.5 ATR ({current_price - 0.5 * atr:.2f})",
            callback_data=f"set_sl_{symbol}_0.5"
        ))
        keyboard.add(types.InlineKeyboardButton(
            f"1.0 ATR ({current_price - atr:.2f})",
            callback_data=f"set_sl_{symbol}_1.0"
        ))
        keyboard.add(types.InlineKeyboardButton(
            f"1.5 ATR ({current_price - 1.5 * atr:.2f})",
            callback_data=f"set_sl_{symbol}_1.5"
        ))
        keyboard.add(types.InlineKeyboardButton(
            f"2.0 ATR ({current_price - 2.0 * atr:.2f})",
            callback_data=f"set_sl_{symbol}_2.0"
        ))
        
        await callback.message.edit_text(
            f"üõë –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è {symbol}:\n"
            f"–¢–µ–∫—É—â–∏–π SL: {current_sl:.2f}\n"
            f"ATR: {atr:.2f}",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ stop_loss_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith('set_sl_'))
async def set_stop_loss_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
    try:
        _, _, symbol, atr_multiplier = callback.data.split('_')
        atr_multiplier = float(atr_multiplier)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = bot.trading_bot.calculate_indicators()
        if not indicators:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ATR")
            return
            
        atr = indicators['ATR']
        current_price = indicators['last_close']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
        if current_price > 0:
            new_sl = current_price - atr_multiplier * atr
        else:
            new_sl = current_price + atr_multiplier * atr
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
        success = bot.trading_bot.set_stop_loss(symbol, new_sl)
        
        if success:
            await callback.answer(f"‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_sl:.2f}")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ set_stop_loss_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith('tp'))
async def take_profit_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"""
    try:
        tp_type, symbol = callback.data.split('_')
        positions = bot.trading_bot.get_positions()
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –ø–æ —Å–∏–º–≤–æ–ª—É
        position = None
        for pos in positions:
            if pos.get('symbol') == symbol:
                position = pos
                break
                
        if not position:
            await callback.answer("‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π ATR
        indicators = bot.trading_bot.calculate_indicators()
        if not indicators:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ATR")
            return
            
        atr = indicators['ATR']
        current_price = indicators['last_close']
        current_tp = float(position.get(f'takeProfit{tp_type[2]}', 0))
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            f"1.0 ATR ({current_price + atr:.2f})",
            callback_data=f"set_tp_{symbol}_{tp_type[2]}_1.0"
        ))
        keyboard.add(types.InlineKeyboardButton(
            f"1.5 ATR ({current_price + 1.5 * atr:.2f})",
            callback_data=f"set_tp_{symbol}_{tp_type[2]}_1.5"
        ))
        keyboard.add(types.InlineKeyboardButton(
            f"2.0 ATR ({current_price + 2.0 * atr:.2f})",
            callback_data=f"set_tp_{symbol}_{tp_type[2]}_2.0"
        ))
        keyboard.add(types.InlineKeyboardButton(
            f"2.5 ATR ({current_price + 2.5 * atr:.2f})",
            callback_data=f"set_tp_{symbol}_{tp_type[2]}_2.5"
        ))
        
        await callback.message.edit_text(
            f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç {tp_type[2]} –¥–ª—è {symbol}:\n"
            f"–¢–µ–∫—É—â–∏–π TP{tp_type[2]}: {current_tp:.2f}\n"
            f"ATR: {atr:.2f}",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ take_profit_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith('set_tp_'))
async def set_take_profit_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"""
    try:
        _, _, symbol, tp_number, atr_multiplier = callback.data.split('_')
        atr_multiplier = float(atr_multiplier)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = bot.trading_bot.calculate_indicators()
        if not indicators:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ATR")
            return
            
        atr = indicators['ATR']
        current_price = indicators['last_close']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        if current_price > 0:
            new_tp = current_price + atr_multiplier * atr
        else:
            new_tp = current_price - atr_multiplier * atr
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        success = bot.trading_bot.set_take_profit(symbol, tp_number, new_tp)
        
        if success:
            await callback.answer(f"‚úÖ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç {tp_number} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_tp:.2f}")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ set_take_profit_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith('settings_'))
async def settings_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        setting_type = callback.data.split('_')[1]
        
        if setting_type == 'notifications':
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                callback_data="toggle_notifications_on"
            ))
            keyboard.add(types.InlineKeyboardButton(
                "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                callback_data="toggle_notifications_off"
            ))
            
            await callback.message.edit_text(
                "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
                "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥–µ –≤ –ø–æ–∑–∏—Ü–∏—é\n"
                "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏\n"
                "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —á–∞—Å—Ç–∏—á–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏\n"
                "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–≤–∏–∂–µ–Ω–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞\n"
                "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö",
                reply_markup=keyboard
            )
            
        elif setting_type == 'indicators':
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                "üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ RSI",
                callback_data="settings_rsi"
            ))
            keyboard.add(types.InlineKeyboardButton(
                "üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ATR",
                callback_data="settings_atr"
            ))
            keyboard.add(types.InlineKeyboardButton(
                "üìâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SMA",
                callback_data="settings_sma"
            ))
            
            await callback.message.edit_text(
                "üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:\n\n"
                "‚Ä¢ –ü–µ—Ä–∏–æ–¥ RSI (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 14)\n"
                "‚Ä¢ –ü–µ—Ä–∏–æ–¥ ATR (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 14)\n"
                "‚Ä¢ –ü–µ—Ä–∏–æ–¥—ã SMA (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20, 50)\n"
                "‚Ä¢ –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è",
                reply_markup=keyboard
            )
            
        elif setting_type == 'risk':
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                "üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏",
                callback_data="settings_position_size"
            ))
            keyboard.add(types.InlineKeyboardButton(
                "üõë –°—Ç–æ–ø-–ª–æ—Å—Å",
                callback_data="settings_stop_loss"
            ))
            keyboard.add(types.InlineKeyboardButton(
                "üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç",
                callback_data="settings_take_profit"
            ))
            
            await callback.message.edit_text(
                "üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞:\n\n"
                "‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)\n"
                "‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (ATR)\n"
                "‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ (ATR)\n"
                "‚Ä¢ –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø",
                reply_markup=keyboard
            )
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ settings_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith('toggle_notifications_'))
async def toggle_notifications_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        state = callback.data.split('_')[2]
        success = bot.trading_bot.toggle_notifications(state == 'on')
        
        if success:
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if state == 'on' else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            await callback.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ toggle_notifications_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith('settings_rsi'))
async def rsi_settings_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RSI"""
    try:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "10",
            callback_data="set_rsi_10"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "14",
            callback_data="set_rsi_14"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "21",
            callback_data="set_rsi_21"
        ))
        
        await callback.message.edit_text(
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ RSI:\n\n"
            "‚Ä¢ 10 - –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π\n"
            "‚Ä¢ 14 - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π\n"
            "‚Ä¢ 21 - –º–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ rsi_settings_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith('set_rsi_'))
async def set_rsi_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ RSI"""
    try:
        period = int(callback.data.split('_')[2])
        success = bot.trading_bot.set_rsi_period(period)
        
        if success:
            await callback.answer(f"‚úÖ –ü–µ—Ä–∏–æ–¥ RSI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {period}")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ RSI")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ set_rsi_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith('settings_atr'))
async def atr_settings_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ATR"""
    try:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "10",
            callback_data="set_atr_10"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "14",
            callback_data="set_atr_14"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "21",
            callback_data="set_atr_21"
        ))
        
        await callback.message.edit_text(
            "üìà –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ ATR:\n\n"
            "‚Ä¢ 10 - –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π\n"
            "‚Ä¢ 14 - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π\n"
            "‚Ä¢ 21 - –º–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ atr_settings_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith('set_atr_'))
async def set_atr_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ ATR"""
    try:
        period = int(callback.data.split('_')[2])
        success = bot.trading_bot.set_atr_period(period)
        
        if success:
            await callback.answer(f"‚úÖ –ü–µ—Ä–∏–æ–¥ ATR —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {period}")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ ATR")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ set_atr_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith('settings_sma'))
async def sma_settings_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMA"""
    try:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "SMA20",
            callback_data="set_sma_20"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "SMA50",
            callback_data="set_sma_50"
        ))
        
        await callback.message.edit_text(
            "üìâ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ SMA –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            "‚Ä¢ SMA20 - –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥\n"
            "‚Ä¢ SMA50 - –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ sma_settings_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith('set_sma_'))
async def set_sma_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ SMA"""
    try:
        period = int(callback.data.split('_')[2])
        success = bot.trading_bot.set_sma_period(period)
        
        if success:
            await callback.answer(f"‚úÖ –ü–µ—Ä–∏–æ–¥ SMA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {period}")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ SMA")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ set_sma_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith('settings_position_size'))
async def position_size_settings_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "0.5%",
            callback_data="set_position_size_0.5"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "1.0%",
            callback_data="set_position_size_1.0"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "2.0%",
            callback_data="set_position_size_2.0"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "5.0%",
            callback_data="set_position_size_5.0"
        ))
        
        await callback.message.edit_text(
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (% –æ—Ç –±–∞–ª–∞–Ω—Å–∞):\n\n"
            "‚Ä¢ 0.5% - –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π\n"
            "‚Ä¢ 1.0% - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π\n"
            "‚Ä¢ 2.0% - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π\n"
            "‚Ä¢ 5.0% - –æ—á–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ position_size_settings_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith('set_position_size_'))
async def set_position_size_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        size = float(callback.data.split('_')[3])
        success = bot.trading_bot.set_position_size(size)
        
        if success:
            await callback.answer(f"‚úÖ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {size}%")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ set_position_size_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith('settings_stop_loss'))
async def stop_loss_settings_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
    try:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "0.5 ATR",
            callback_data="set_stop_loss_0.5"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "1.0 ATR",
            callback_data="set_stop_loss_1.0"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "1.5 ATR",
            callback_data="set_stop_loss_1.5"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "2.0 ATR",
            callback_data="set_stop_loss_2.0"
        ))
        
        await callback.message.edit_text(
            "üõë –í—ã–±–µ—Ä–∏—Ç–µ –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (ATR):\n\n"
            "‚Ä¢ 0.5 ATR - —Ç–µ—Å–Ω—ã–π —Å—Ç–æ–ø\n"
            "‚Ä¢ 1.0 ATR - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π\n"
            "‚Ä¢ 1.5 ATR - —à–∏—Ä–æ–∫–∏–π —Å—Ç–æ–ø\n"
            "‚Ä¢ 2.0 ATR - –æ—á–µ–Ω—å —à–∏—Ä–æ–∫–∏–π —Å—Ç–æ–ø",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ stop_loss_settings_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith('set_stop_loss_'))
async def set_stop_loss_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
    try:
        multiplier = float(callback.data.split('_')[3])
        success = bot.trading_bot.set_stop_loss_multiplier(multiplier)
        
        if success:
            await callback.answer(f"‚úÖ –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {multiplier} ATR")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å—Ç–æ–ø-–ª–æ—Å—Å–∞")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ set_stop_loss_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith('settings_take_profit'))
async def take_profit_settings_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"""
    try:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "TP1",
            callback_data="set_tp1"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "TP2",
            callback_data="set_tp2"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "TP3",
            callback_data="set_tp3"
        ))
        
        await callback.message.edit_text(
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            "‚Ä¢ TP1 - –ø–µ—Ä–≤—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç\n"
            "‚Ä¢ TP2 - –≤—Ç–æ—Ä–æ–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç\n"
            "‚Ä¢ TP3 - —Ç—Ä–µ—Ç–∏–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ take_profit_settings_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith('set_tp'))
async def set_take_profit_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"""
    try:
        tp_number = callback.data.split('_')[1]
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "1.0 ATR",
            callback_data=f"set_tp_multiplier_{tp_number}_1.0"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "1.5 ATR",
            callback_data=f"set_tp_multiplier_{tp_number}_1.5"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "2.0 ATR",
            callback_data=f"set_tp_multiplier_{tp_number}_2.0"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "2.5 ATR",
            callback_data=f"set_tp_multiplier_{tp_number}_2.5"
        ))
        
        await callback.message.edit_text(
            f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è TP{tp_number} (ATR):\n\n"
            "‚Ä¢ 1.0 ATR - —Ç–µ—Å–Ω—ã–π —Ç–µ–π–∫\n"
            "‚Ä¢ 1.5 ATR - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π\n"
            "‚Ä¢ 2.0 ATR - —à–∏—Ä–æ–∫–∏–π —Ç–µ–π–∫\n"
            "‚Ä¢ 2.5 ATR - –æ—á–µ–Ω—å —à–∏—Ä–æ–∫–∏–π —Ç–µ–π–∫",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ set_take_profit_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith('set_tp_multiplier_'))
async def set_tp_multiplier_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"""
    try:
        _, _, tp_number, multiplier = callback.data.split('_')
        multiplier = float(multiplier)
        success = bot.trading_bot.set_take_profit_multiplier(tp_number, multiplier)
        
        if success:
            await callback.answer(f"‚úÖ –ú–Ω–æ–∂–∏—Ç–µ–ª—å TP{tp_number} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {multiplier} ATR")
        else:
            await callback.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å TP{tp_number}")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ set_tp_multiplier_callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text="‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=commands_keyboard
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        await dp.start_polling(bot)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
