import asyncio
import sys
import json
from datetime import datetime

# ‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É "aiodns needs a SelectorEventLoop on Windows"
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram import Router
from dotenv import load_dotenv
import os
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_bot.log'),
        logging.StreamHandler()
    ]
)

load_dotenv()
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not all([TELEGRAM_CHAT_ID, TELEGRAM_BOT_TOKEN]):
    logging.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –≤ .env —Ñ–∞–π–ª–µ")
    sys.exit(1)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot=bot, storage=MemoryStorage())
router = Router()

# üìå –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏", callback_data="open_positions")],
    [InlineKeyboardButton(text="üí∞ PnL –∑–∞ –¥–µ–Ω—å –∏ —Å–¥–µ–ª–∫—É", callback_data="pnl_info")],
    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="refresh_data")],
    [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data="buy")],
    [InlineKeyboardButton(text="üìâ –ü—Ä–æ–¥–∞—Ç—å", callback_data="sell")]
])

# –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
commands_keyboard = types.ReplyKeyboardMarkup(
    keyboard=[
        [
            types.KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å"),
            types.KeyboardButton(text="üìÇ –ü–æ–∑–∏—Ü–∏–∏")
        ],
        [
            types.KeyboardButton(text="üí∞ PnL"),
            types.KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        ],
        [
            types.KeyboardButton(text="üõí –ö—É–ø–∏—Ç—å"),
            types.KeyboardButton(text="üìâ –ü—Ä–æ–¥–∞—Ç—å")
        ]
    ],
    resize_keyboard=True
)

def read_json_file(filename: str) -> dict:
    """–ß–∏—Ç–∞–µ—Ç JSON —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞—ë—Ç –µ–≥–æ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    try:
        with open(filename, 'r') as f:
            data = json.load(f)
        
        # üî• –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        logging.info(f"üìÇ –î–∞–Ω–Ω—ã–µ –∏–∑ {filename}: {data}")
        return data
    except FileNotFoundError:
        logging.warning(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π.")
        # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        default_data = {}
        if filename == 'balance.json':
            default_data = {
                "balance": 0,
                "used_margin": 0,
                "free_margin": 0,
                "last_updated": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            }
        elif filename == 'price.json':
            default_data = {"price": 0}
        elif filename == 'positions.json':
            default_data = {"positions": [], "last_updated": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
        elif filename == 'pnl.json':
            default_data = {"daily": 0, "trades": [], "last_updated": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
        
        with open(filename, 'w') as f:
            json.dump(default_data, f, indent=2)
        return default_data
    except json.JSONDecodeError:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –∏–∑ —Ñ–∞–π–ª–∞ {filename}, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.")
        with open(filename, 'w') as f:
            json.dump({}, f)
        return {}

def write_json_file(filename: str, data: dict) -> bool:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(filename, 'w') as f:
            json.dump(data, f, indent=2)
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª {filename}: {e}")
        return False

def format_positions(positions: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    if not positions:
        return "üìÇ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
    
    message = "üìÇ –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n"
    for pos in positions:
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤
            symbol = pos.get('symbol', 'Unknown')
            side = pos.get('side', 'Unknown')
            qty = float(pos.get('size', 0))  # üî• –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float
            entry = float(pos.get('avgPrice', 0))  # üî• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ avgPrice
            leverage = int(pos.get('leverage', 1))  # üî• –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
            unrealized_pnl = float(pos.get('unrealisedPnl', 0))  # üî• –î–æ–±–∞–≤–ª—è–µ–º unrealized PnL
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            if qty == 0 or not side:
                logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø—É—Å—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è: {pos}")
                continue
            
            message += f"üîπ {symbol}: {side} {qty} @ {entry:.2f} (x{leverage})\n"
            message += f"   üìä PnL: {unrealized_pnl:.2f} USDT\n"
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            continue
    
    return message if message != "üìÇ –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n" else "üìÇ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"

def format_pnl(pnl_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç PnL –¥–∞–Ω–Ω—ã–µ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
    try:
        # ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ float
        daily_pnl = float(pnl_data.get('daily', 0))
        trades = pnl_data.get('trades', [])

        message = f"üí∞ –î–Ω–µ–≤–Ω–æ–π PnL: {daily_pnl:.2f} USDT\n\n"

        if trades:
            message += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:\n"
            for trade in trades[:5]:  # ‚úÖ –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
                try:
                    symbol = trade.get('symbol', 'Unknown')
                    pnl = float(trade.get('closedPnl', 0))  # üî• –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float
                    side = trade.get('side', 'Unknown')
                    entry_price = float(trade.get('avgEntryPrice', 0))  # üî• –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
                    exit_price = float(trade.get('avgExitPrice', 0))  # üî• –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –≤—ã—Ö–æ–¥–∞

                    if symbol and pnl is not None:
                        message += f"üî∏ {symbol} ({side}):\n"
                        message += f"   PnL: {pnl:.2f} USDT\n"
                        message += f"   –í—Ö–æ–¥: {entry_price:.2f} | –í—ã—Ö–æ–¥: {exit_price:.2f}\n"
                    else:
                        logging.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {trade}")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
                    continue
        else:
            message += "–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"

        return message
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ PnL: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ PnL"

@dp.callback_query(F.data == "open_positions")
async def open_positions_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    try:
        data = read_json_file('positions.json')
        positions = data.get('positions', [])
        message = format_positions(positions)
        if data.get('last_updated'):
            message += f"\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {data['last_updated']}"
            
        await callback.message.answer(message)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π")
    finally:
        await callback.answer()

@dp.callback_query(F.data == "pnl_info")
async def pnl_info_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ PnL"""
    try:
        pnl_data = read_json_file('pnl.json')
        message = format_pnl(pnl_data)
        if pnl_data.get('last_updated'):
            message += f"\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {pnl_data['last_updated']}"
            
        await callback.message.answer(message)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ PnL: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ PnL")
    finally:
        await callback.answer()

@dp.callback_query(F.data == "refresh_data")
async def refresh_data_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    try:
        signals = {"refresh_data": True, "last_signal": datetime.now().isoformat()}
        if write_json_file('signals.json', signals):
            await callback.message.answer("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        await callback.answer()

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=commands_keyboard
    )

@dp.message(F.text == "üìä –°—Ç–∞—Ç—É—Å")
async def status_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    await check_status(message)

@dp.message(F.text == "üìÇ –ü–æ–∑–∏—Ü–∏–∏")
async def positions_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∑–∏—Ü–∏–π"""
    try:
        data = read_json_file('positions.json')
        positions = data.get('positions', [])
        message_text = format_positions(positions)
        if data.get('last_updated'):
            message_text += f"\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {data['last_updated']}"
            
        await message.answer(message_text)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π")

@dp.message(F.text == "üí∞ PnL")
async def pnl_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ PnL"""
    try:
        pnl_data = read_json_file('pnl.json')
        message_text = format_pnl(pnl_data)
        if pnl_data.get('last_updated'):
            message_text += f"\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {pnl_data['last_updated']}"
            
        await message.answer(message_text)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ PnL: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ PnL")

@dp.message(F.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
async def refresh_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    try:
        signals = {"refresh_data": True, "last_signal": datetime.now().isoformat()}
        if write_json_file('signals.json', signals):
            await message.answer("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

@dp.message(F.text == "üõí –ö—É–ø–∏—Ç—å")
async def buy_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏"""
    await force_buy(message)

@dp.message(F.text == "üìâ –ü—Ä–æ–¥–∞—Ç—å")
async def sell_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–∞–∂–∏"""
    await force_sell(message)

@dp.message(Command("status"))
async def check_status(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        balance_data = read_json_file('balance.json')
        if not balance_data:
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            return

        balance = balance_data.get('balance', 0)
        used_margin = balance_data.get('used_margin', 0)
        free_margin = balance_data.get('free_margin', 0)
        last_updated = balance_data.get('last_updated', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        status_message = f"""
        üìä –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞:
        üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} USDT
        üîí –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä–∂–∞: {used_margin:.2f} USDT
        üíµ –°–≤–æ–±–æ–¥–Ω–∞—è –º–∞—Ä–∂–∞: {free_margin:.2f} USDT
        ‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_updated}
        """
        await message.answer(status_message)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞")

@dp.message(Command("buy"))
async def force_buy(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–ª–∏–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        price_data = read_json_file('price.json')
        current_price = float(price_data.get('price', 0))

        if current_price <= 0:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            return

        stop_loss = current_price * 0.995
        take_profit_1 = current_price * 1.005
        take_profit_2 = current_price * 1.01
        take_profit_3 = current_price * 1.015

        signal = {
            "force_trade": True,
            "side": "Buy",
            "price": current_price,
            "stop_loss": stop_loss,
            "take_profit_1": take_profit_1,
            "take_profit_2": take_profit_2,
            "take_profit_3": take_profit_3,
            "qty": 0.001
        }

        if write_json_file('signals.json', signal):
            await message.answer(f"‚úÖ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {current_price:.2f}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏")

@dp.message(Command("sell"))
async def force_sell(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        price_data = read_json_file('price.json')
        current_price = float(price_data.get('price', 0))

        if current_price <= 0:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
            return

        stop_loss = current_price * 1.005
        take_profit_1 = current_price * 0.995
        take_profit_2 = current_price * 0.99
        take_profit_3 = current_price * 0.985

        signal = {
            "force_trade": True,
            "side": "Sell",
            "price": current_price,
            "stop_loss": stop_loss,
            "take_profit_1": take_profit_1,
            "take_profit_2": take_profit_2,
            "take_profit_3": take_profit_3,
            "qty": 0.001
        }

        if write_json_file('signals.json', signal):
            await message.answer(f"‚úÖ –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {current_price:.2f}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text="‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=commands_keyboard
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        await dp.start_polling(bot)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
