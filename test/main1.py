import os
import time
import requests
import logging
from dotenv import load_dotenv
from pybit.unified_trading import HTTP
import talib
import sys
from datetime import datetime
import numpy as np
from colorama import Fore, Style
import aiohttp
import asyncio

# ======================== –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ========================
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

def validate_config():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    """
    critical_errors = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
    if not os.getenv("BYBIT_API_KEY") or not os.getenv("BYBIT_API_SECRET"):
        critical_errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏ Bybit")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram —Ç–æ–∫–µ–Ω
    if not os.getenv("TELEGRAM_BOT_TOKEN") or not os.getenv("TELEGRAM_CHAT_ID"):
        critical_errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª
    symbol = os.getenv("SYMBOL", "BTCUSDT").upper()
    if not symbol.endswith("USDT"):
        critical_errors.append(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å–∏–º–≤–æ–ª {symbol}. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å USDT-–º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–µ—á–æ
    try:
        leverage = int(os.getenv("LEVERAGE", 3))
        min_leverage = int(os.getenv("MIN_LEVERAGE", 1))
        max_leverage = int(os.getenv("MAX_LEVERAGE", 5))
        
        if leverage < min_leverage or leverage > max_leverage:
            critical_errors.append(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø–ª–µ—á–æ {leverage} –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [{min_leverage}, {max_leverage}]")
    except ValueError:
        critical_errors.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–µ—á–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
    try:
        risk_percentage = float(os.getenv("RISK_PERCENTAGE", 1))
        if risk_percentage <= 0 or risk_percentage > 5:
            critical_errors.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞: {risk_percentage}. –î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 0-5%")
    except ValueError:
        critical_errors.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ä–∏—Å–∫–∞")
    
    # –î–æ–±–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ä–∏—Å–∫–∞
    max_daily_trades = int(os.getenv("MAX_DAILY_TRADES", 12))
    if not (1 <= max_daily_trades <= 20):
        critical_errors.append("MAX_DAILY_TRADES –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    if critical_errors:
        error_message = "üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n" + "\n".join(f"- {error}" for error in critical_errors)
        print(error_message)
        if os.getenv("TELEGRAM_BOT_TOKEN") and os.getenv("TELEGRAM_CHAT_ID"):
            send_telegram_message(error_message)
        sys.exit(1)
    
    return {
        "symbol": symbol,
        "leverage": leverage,
        "min_leverage": min_leverage,
        "max_leverage": max_leverage,
        "risk_percentage": risk_percentage
    }

# –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
config = validate_config()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
SYMBOL = config["symbol"]
LEVERAGE = config["leverage"]
MIN_LEVERAGE = config["min_leverage"]
MAX_LEVERAGE = config["max_leverage"]
RISK_PERCENTAGE = config["risk_percentage"]

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TESTNET = os.getenv("TESTNET", "True").lower() == "true"
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
VOLUME_THRESHOLD = float(os.getenv("VOLUME_THRESHOLD", 1.5))
ORDERBOOK_DEPTH = int(os.getenv("ORDERBOOK_DEPTH", 10))
MIN_VOLUME_RATIO = float(os.getenv("MIN_VOLUME_RATIO", 1.05))

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–µ–π
TAKE_PROFIT_1 = float(os.getenv("TAKE_PROFIT_1", 0.3))
TAKE_PROFIT_2 = float(os.getenv("TAKE_PROFIT_2", 0.6))
TAKE_PROFIT_3 = float(os.getenv("TAKE_PROFIT_3", 1.0))
TRAILING_STOP = float(os.getenv("TRAILING_STOP", 0.2))

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
STOP_LOSS_PERCENTAGE = float(os.getenv("STOP_LOSS_PERCENTAGE", 0.3))
ATR_MULTIPLIER = float(os.getenv("ATR_MULTIPLIER", 2.0))

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
RSI_PERIOD = int(os.getenv("RSI_PERIOD", 14))
RSI_OVERBOUGHT = float(os.getenv("RSI_OVERBOUGHT", 70))
RSI_OVERSOLD = float(os.getenv("RSI_OVERSOLD", 30))
VWAP_PERIOD = int(os.getenv("VWAP_PERIOD", 20))

CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 5))

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä
MIN_POSITION_SIZES = {
    "BTCUSDT": 0.001,
    "ETHUSDT": 0.01,
    "SOLUSDT": 1,
    "XRPUSDT": 10,
    "ADAUSDT": 10,
    "DOGEUSDT": 100,
    "MATICUSDT": 10,
    "LINKUSDT": 1,
    "UNIUSDT": 0.1,
    "AVAXUSDT": 0.1
}

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ (–≤ %)
MIN_STOP_DISTANCES = {
    "BTCUSDT": 0.1,
    "ETHUSDT": 0.1,
    "SOLUSDT": 0.2,
    "XRPUSDT": 0.2,
    "ADAUSDT": 0.2,
    "DOGEUSDT": 0.3,
    "MATICUSDT": 0.2,
    "LINKUSDT": 0.2,
    "UNIUSDT": 0.2,
    "AVAXUSDT": 0.2
}

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
DEMO_MODE = True  # –ú–µ–Ω—è–µ–º –Ω–∞ False –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏

# ======================== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ========================
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s [%(levelname)s] %(message)s')

class BybitAPI:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Bybit —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    def __init__(self):
        self.session = aiohttp.ClientSession()

    async def get_positions(self, category, symbol):
        url = f"https://api-testnet.bybit.com/v5/position/list?category={category}&symbol={symbol}"
        async with self.session.get(url) as resp:
            return await resp.json()

    async def _wait_for_rate_limit(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        current_time = time.time()
        time_since_last_request = current_time - self.last_request_time
        if time_since_last_request < self.min_request_interval:
            await asyncio.sleep(self.min_request_interval - time_since_last_request)
        self.last_request_time = time.time()

    async def _handle_api_error(self, response, retry_count=0):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API"""
        if response.get("retCode") == 0:
            return response

        error_msg = response.get("retMsg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        error_code = response.get("retCode")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ rate limit
        if error_code == 10006 and retry_count < self.rate_limit_retries:
            logging.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–Ω–∏–µ {self.rate_limit_delay} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(self.rate_limit_delay)
            return None

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
        error_message = f"–û—à–∏–±–∫–∞ API (–∫–æ–¥ {error_code}): {error_msg}"
        logging.error(error_message)
        await send_telegram_message(f"‚ö†Ô∏è {error_message}")
        return None

    async def get_kline(self, category="linear", symbol=SYMBOL, interval=5, limit=50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        await self._wait_for_rate_limit()
        response = await self.session.get_kline(category=category, symbol=symbol, interval=interval, limit=limit)
        if not response or "result" not in response or "list" not in response["result"]:
            logging.warning("‚ö† Bybit API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥.")
            return None
        return await self._handle_api_error(response)

    async def get_orderbook(self, category="linear", symbol=SYMBOL, limit=50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        await self._wait_for_rate_limit()
        response = await self.session.get_orderbook(category=category, symbol=symbol, limit=limit)
        return await self._handle_api_error(response)

    async def get_executions(self, category="linear", symbol=SYMBOL, limit=50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        await self._wait_for_rate_limit()
        response = await self.session.get_executions(category=category, symbol=symbol, limit=limit)
        return await self._handle_api_error(response)

    async def get_wallet_balance(self, accountType="UNIFIED"):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        await self._wait_for_rate_limit()
        response = await self.session.get_wallet_balance(accountType=accountType)
        return await self._handle_api_error(response)

    async def set_leverage(self, symbol=SYMBOL, leverage=5):
        """ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–µ—á–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ """
        try:
            current_positions = await self.get_positions(symbol=symbol)
            if current_positions and "result" in current_positions and "list" in current_positions["result"]:
                current_leverage = float(current_positions["result"]["list"][0].get("leverage", 1))
                if current_leverage == leverage:
                    logging.info(f"üîπ –ü–ª–µ—á–æ {leverage}x —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                    return True  # –ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º

            # –ï—Å–ª–∏ –ø–ª–µ—á–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è ‚Äì –∏–∑–º–µ–Ω—è–µ–º
            await self._wait_for_rate_limit()
            response = await self.session.set_leverage(
                category="linear",
                symbol=symbol,
                buyLeverage=str(leverage),
                sellLeverage=str(leverage)
            )
            return await self._handle_api_error(response)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–µ—á–∞: {e}")
            return None

    async def place_order(self, side, qty, stop_loss=None, take_profit_1=None, take_profit_2=None, take_profit_3=None):
        """
        –†–∞–∑–º–µ—â–∞–µ—Ç –ª–∏–º–∏—Ç–Ω—ã–π –º–µ–π–∫–µ—Ä-–æ—Ä–¥–µ—Ä –¥–ª—è USDT-M Perpetual Futures —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = await self.get_latest_price()
            if not current_price:
                return False

            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ä–¥–µ—Ä
            order = await self.session.place_order(
                category="linear",
                symbol=SYMBOL,
                side=side,
                orderType="Limit",
                qty=str(qty),
                price=str(current_price),
                timeInForce="PostOnly"  # –ú–µ–π–∫–µ—Ä—Å–∫–∏–π –æ—Ä–¥–µ—Ä
            )

            if not order or "result" not in order:
                logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {order}")
                return False

            order_id = order["result"]["orderId"]
            logging.info(f"–†–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä {order_id}")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ –ø–µ—Ä–≤—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            if stop_loss and take_profit_1:
                await self.session.set_trading_stop(
                    category="linear",
                    symbol=SYMBOL,
                    side=side,
                    stopLoss=str(stop_loss),
                    takeProfit=str(take_profit_1)
                )
                logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã SL: {stop_loss} –∏ TP1: {take_profit_1}")

            # –†–∞–∑–º–µ—â–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã –∫–∞–∫ –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            if take_profit_2 and take_profit_3:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                tp2_qty = qty * 0.3  # 30% –ø–æ–∑–∏—Ü–∏–∏
                tp3_qty = qty * 0.4  # 40% –ø–æ–∑–∏—Ü–∏–∏

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                if tp2_qty >= MIN_POSITION_SIZES.get(SYMBOL, 0.002):
                    tp2_order = await self.session.place_order(
                        category="linear",
                        symbol=SYMBOL,
                        side="Sell" if side == "Buy" else "Buy",
                        orderType="Limit",
                        qty=str(tp2_qty),
                        price=str(take_profit_2),
                        timeInForce="PostOnly",
                        reduceOnly=True
                    )
                    if tp2_order and "result" in tp2_order:
                        logging.info(f"–†–∞–∑–º–µ—â–µ–Ω TP2 –æ—Ä–¥–µ—Ä: {tp2_order['result']['orderId']}")

                if tp3_qty >= MIN_POSITION_SIZES.get(SYMBOL, 0.003):
                    tp3_order = await self.session.place_order(
                        category="linear",
                        symbol=SYMBOL,
                        side="Sell" if side == "Buy" else "Buy",
                        orderType="Limit",
                        qty=str(tp3_qty),
                        price=str(take_profit_3),
                        timeInForce="PostOnly",
                        reduceOnly=True
                    )
                    if tp3_order and "result" in tp3_order:
                        logging.info(f"–†–∞–∑–º–µ—â–µ–Ω TP3 –æ—Ä–¥–µ—Ä: {tp3_order['result']['orderId']}")

            return True

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}"
            logging.error(error_msg)
            await send_telegram_message(f"‚ö† {error_msg}")
            return False

    async def set_trading_stop(self, category="linear", symbol=SYMBOL, side="Buy", stopLoss=None, takeProfit=None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        await self._wait_for_rate_limit()
        params = {
            "category": category,
            "symbol": symbol,
            "side": side
        }
        if stopLoss:
            params["stopLoss"] = str(stopLoss)
        if takeProfit:
            params["takeProfit"] = str(takeProfit)
        
        response = await self.session.set_trading_stop(**params)
        return await self._handle_api_error(response)

    async def get_closed_pnl(self, category="linear", symbol=SYMBOL, startTime=None, endTime=None, limit=50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö PNL —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        await self._wait_for_rate_limit()
        params = {
            "category": category,
            "symbol": symbol,
            "limit": limit
        }
        if startTime:
            params["startTime"] = startTime
        if endTime:
            params["endTime"] = endTime
            
        response = await self.session.get_closed_pnl(**params)
        return await self._handle_api_error(response)

    async def get_order_list(self, category="linear", symbol=SYMBOL, orderId=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ—Ä–¥–µ—Ä–µ"""
        await self._wait_for_rate_limit()
        params = {
            "category": category,
            "symbol": symbol,
            "orderId": orderId
        }
        response = await self.session.get_order_list(**params)
        return await self._handle_api_error(response)

    async def get_tickers(self, category="linear", symbol=SYMBOL):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Ç–∏–∫–µ—Ä–∞"""
        await self._wait_for_rate_limit()
        response = await self.session.get_tickers(category=category, symbol=symbol)
        return await self._handle_api_error(response)

# ======================== –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram ========================
async def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    async with aiohttp.ClientSession() as session:
        async with session.post(url, data=data) as response:
            if response.status != 200:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è: {await response.text()}")

# ======================== –ö–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ ========================
class TradingBot:
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        """
        self.session = HTTP(
            testnet=TESTNET,
            api_key=os.getenv("BYBIT_API_KEY"),
            api_secret=os.getenv("BYBIT_API_SECRET")
        )
        self.api = BybitAPI()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
        self.last_checked_price = None
        self.active_position = False
        self.current_position = None
        self.last_order_time = 0
        self.min_order_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.processed_orders = set()
        self.last_trade_time = None
        self.daily_pnl = 0
        self.consecutive_losses = 0
        self.last_daily_reset = None
        self.last_position_check = None
        self.position_check_interval = 60  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        self.lock = asyncio.Lock()  # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å
        self.max_daily_trades = 12
        self.daily_trade_count = 0

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–µ—á–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        asyncio.create_task(self.initialize_leverage())

    async def initialize_leverage(self):
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
            position_info = await self.api.get_positions(category="linear", symbol=SYMBOL)
            if position_info and position_info.get("result", {}).get("list"):
                current_leverage = float(position_info["result"]["list"][0].get("leverage", 1))

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –ø–ª–µ—á–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
                if current_leverage != LEVERAGE:
                    await self.api.set_leverage(leverage=LEVERAGE)
                    logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–µ—á–æ {LEVERAGE}x –¥–ª—è {SYMBOL}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–µ—á–∞: {e}")
            await send_telegram_message(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–µ—á–∞: {e}")

    def get_atr(self, period=14):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç ATR (Average True Range)"""
        try:
            candles = self.api.get_kline(category="linear", symbol=SYMBOL, interval=5, limit=period)
            
            if not candles or "result" not in candles or "list" not in candles["result"]:
                logging.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π")
                return None

            highs = np.array([float(candle[2]) for candle in candles["result"]["list"]])
            lows = np.array([float(candle[3]) for candle in candles["result"]["list"]])
            closes = np.array([float(candle[4]) for candle in candles["result"]["list"]])

            if len(closes) < period:
                logging.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ATR. –ü–æ–ª—É—á–µ–Ω–æ {len(closes)} —Å–≤–µ—á–µ–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è {period}")
                return None

            atr = talib.ATR(highs, lows, closes, timeperiod=period)[-1]
            return atr
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ ATR: {e}")
            return None

    def reset_daily_stats(self):
        today = datetime.now().date()
        if self.last_daily_reset != today:
            self.daily_pnl = 0
            self.daily_trade_count = 0
            self.last_daily_reset = today
            send_telegram_message("üìä –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")

    def check_pnl(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç PNL –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º
        """
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –Ω–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π –¥–µ–Ω—å
            self.reset_daily_stats()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            current_time = time.time()
            if self.last_trade_time is None:
                self.last_trade_time = current_time - 300  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –º–∏–Ω—É—Ç
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            try:
                closed_orders = self.api.get_closed_pnl(
                    category="linear",
                    symbol=SYMBOL,
                    startTime=int(self.last_trade_time * 1000),
                    endTime=int(current_time * 1000),
                    limit=50
                )
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}"
                logging.error(error_msg)
                send_telegram_message(f"‚ö†Ô∏è {error_msg}")
                return

            if "result" not in closed_orders or "list" not in closed_orders["result"]:
                logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫—Ä—ã—Ç—ã–π –æ—Ä–¥–µ—Ä
            for order in closed_orders["result"]["list"]:
                order_id = order.get("orderId")
                if not order_id or order_id in self.processed_orders:
                    continue

                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞
                    order_details = self.api.get_order_list(
                        category="linear",
                        symbol=SYMBOL,
                        orderId=order_id
                    )

                    if "result" not in order_details or "list" not in order_details["result"]:
                        continue

                    order_info = order_details["result"]["list"][0]
                    side = order_info.get("side")
                    qty = float(order_info.get("qty", 0))
                    entry_price = float(order_info.get("price", 0))
                    exit_price = float(order_info.get("closePrice", 0))
                    pnl = float(order.get("closedPnl", 0))

                    if side and qty > 0 and entry_price > 0 and exit_price > 0:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        self.daily_pnl += pnl
                        if pnl < 0:
                            self.consecutive_losses += 1
                        else:
                            self.consecutive_losses = 0

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        message = f"""
                        üéØ –ó–∞–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞:
                        –°—Ç–æ—Ä–æ–Ω–∞: {side}
                        –†–∞–∑–º–µ—Ä: {qty} {SYMBOL}
                        –í—Ö–æ–¥: {entry_price:.2f}
                        –í—ã—Ö–æ–¥: {exit_price:.2f}
                        PNL: {pnl:.2f} USDT
                        üìä –î–Ω–µ–≤–Ω–æ–π PNL: {self.daily_pnl:.2f} USDT
                        """
                        send_telegram_message(message)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
                        if self.daily_pnl <= -100:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫ 100 USDT
                            error_msg = "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ —É–±—ã—Ç–∫–∞. –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
                            logging.warning(error_msg)
                            send_telegram_message(error_msg)
                            return False

                        if self.consecutive_losses >= 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —É–±—ã—Ç–∫–∞
                            error_msg = "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —É–±—ã—Ç–∫–æ–≤. –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
                            logging.warning(error_msg)
                            send_telegram_message(error_msg)
                            return False

                        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                        self.processed_orders.add(order_id)
                        if len(self.processed_orders) > 50:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–∞
                            self.processed_orders = set(list(self.processed_orders)[-50:])

                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ä–¥–µ—Ä–∞ {order_id}: {e}")
                    continue

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.last_trade_time = current_time
            return True

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ PNL: {e}"
            logging.error(error_msg)
            send_telegram_message(f"‚ö†Ô∏è {error_msg}")
            return False

    def get_latest_price(self):
        try:
            result = self.api.get_tickers(category="linear", symbol=SYMBOL)
            if "result" in result and "list" in result["result"] and result["result"]["list"]:
                price = float(result["result"]["list"][0]["lastPrice"])
                return price
            else:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É.")
                return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
            return None

    def calculate_trade_size(self, stop_loss_price, entry_price):
      try:
          # üî• –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å USDT
          account_info = self.api.get_wallet_balance(accountType="UNIFIED")
          logging.info(f"API –æ—Ç–≤–µ—Ç get_wallet_balance: {account_info}")

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å USDT
          if "result" in account_info and "list" in account_info["result"]:
              balance_info = account_info["result"]["list"][0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ —Å–ø–∏—Å–∫–µ
              if "coin" in balance_info:
                  for item in balance_info["coin"]:
                      if item["coin"].upper() == "USDT":
                          balance = float(item["walletBalance"])
                          logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –±–∞–ª–∞–Ω—Å USDT: {balance} USDT")
                          break
                  else:
                      logging.error("USDT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–æ–≤.")
                      return None
              else:
                  logging.error("–û—à–∏–±–∫–∞: –∫–ª—é—á 'coin' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ API.")
                  return None
          else:
              logging.error("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")
              return None

          # üî¢ –†–∞—Å—Å—á—ë—Ç —Ä–∏—Å–∫–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ USDT
          risk_amount = balance * (RISK_PERCENTAGE / 100)  # –ö–∞–∫–æ–π % –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ —Å–¥–µ–ª–∫–µ
          stop_loss_distance = abs(entry_price - stop_loss_price)  # –î–∏—Å—Ç–∞–Ω—Ü–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞

          if stop_loss_distance == 0:
              logging.error("–û—à–∏–±–∫–∞: —Å—Ç–æ–ø-–ª–æ—Å—Å —Ä–∞–≤–µ–Ω –Ω—É–ª—é.")
              return None

          trade_size = risk_amount / stop_loss_distance  # –†–∞—Å—á—ë—Ç –±–∞–∑–æ–≤–æ–≥–æ –æ–±—ä—ë–º–∞ —Å–¥–µ–ª–∫–∏
          trade_size = round(trade_size, 3)  # ‚úÖ –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 0.001 BTC

          return trade_size if trade_size >= 0.001 else None  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä

      except Exception as e:
          logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–¥–µ–ª–∫–∏: {e}")
          return None

    def check_stop_loss_distance(self, entry_price, stop_loss_price):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∏—Ä–∂–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã
            min_distance = MIN_STOP_DISTANCES.get(SYMBOL, 0.1)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            distance_percent = abs(entry_price - stop_loss_price) / entry_price * 100
            
            if distance_percent < min_distance:
                error_msg = f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ ({distance_percent:.2f}%) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ ({min_distance}%)"
                logging.warning(error_msg)
                send_telegram_message(f"‚ö†Ô∏è {error_msg}")
                return False
                
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {e}")
            return False

    def calculate_stop_loss(self, side, entry_price, atr=None):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã
            min_distance = MIN_STOP_DISTANCES.get(SYMBOL, 0.1)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR –∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            if atr:
                distance = atr * ATR_MULTIPLIER
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
                min_distance_price = entry_price * (min_distance / 100)
                distance = max(distance, min_distance_price)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
                distance = entry_price * (max(STOP_LOSS_PERCENTAGE, min_distance) / 100)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–æ—Ä–æ–Ω—ã
            stop_loss = entry_price - distance if side == "Buy" else entry_price + distance
            
            logging.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω —Å—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss:.2f} (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {(distance/entry_price*100):.2f}%)")
            return stop_loss
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: {e}")
            return None

    def analyze_long_term_levels(self):
        try:
            # ‚úÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ—á–∏ (—É–º–µ–Ω—å—à–∞–µ–º limit –¥–æ 100 –¥–ª—è –±–æ–ª—å—à–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
            candles_1H = self.api.get_kline(category="linear", symbol=SYMBOL, interval=60, limit=100)
            candles_4H = self.api.get_kline(category="linear", symbol=SYMBOL, interval=240, limit=100)
            candles_1D = self.api.get_kline(category="linear", symbol=SYMBOL, interval="D", limit=100)

            # ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏–π (—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫)
            def extract_closes(candles):
                if "result" in candles and "list" in candles["result"] and candles["result"]["list"]:
                    return [float(candle[4]) for candle in reversed(candles["result"]["list"])]
                else:
                    return []

            # ‚úÖ –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            closes_1H = extract_closes(candles_1H)
            closes_4H = extract_closes(candles_4H)
            closes_1D = extract_closes(candles_1D)

            # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–≤–µ—á–µ–π)
            logging.info(f"üßê –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π 1H: {closes_1H[-5:]}")
            logging.info(f"üßê –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π 4H: {closes_4H[-5:]}")
            logging.info(f"üßê –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π 1D: {closes_1D[-5:]}")

            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            if not closes_1H:
                logging.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω–µ–π –Ω–∞ 1H!")
            if not closes_4H:
                logging.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω–µ–π –Ω–∞ 4H!")
            if not closes_1D:
                logging.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω–µ–π –Ω–∞ 1D!")

            # ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
            levels = {}

            if closes_1H:
                support_1H, resistance_1H = self.detect_support_resistance(closes_1H) if closes_1H else (None, None)
                levels["1H"] = {"support": support_1H, "resistance": resistance_1H}
                logging.info(f"üîµ 1H: Support: {support_1H:.2f}, Resistance: {resistance_1H:.2f}")

            if closes_4H:
                support_4H, resistance_4H = self.detect_support_resistance(closes_4H) if closes_4H else (None, None)
                levels["4H"] = {"support": support_4H, "resistance": resistance_4H}
                logging.info(f"üü¢ 4H: Support: {support_4H:.2f}, Resistance: {resistance_4H:.2f}")

            if closes_1D:
                support_1D, resistance_1D = self.detect_support_resistance(closes_1D) if closes_1D else (None, None)
                levels["1D"] = {"support": support_1D, "resistance": resistance_1D}
                logging.info(f"üî¥ 1D: Support: {support_1D:.2f}, Resistance: {resistance_1D:.2f}")

            return levels if levels else None

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π: {e}")
            return None


    def detect_support_resistance(self, closes):
        """
        –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è.
        """
        if not closes:
            return None, None
        high = max(closes)
        low = min(closes)
        return low, high

    def scalping_strategy(self):
        """
        –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞–∫–∞–Ω–∞, –æ–±—ä–µ–º–æ–≤ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ –Ω–∞ –¥–µ–Ω—å
            if self.daily_trade_count >= self.max_daily_trades:
                logging.info("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —Ä–∞–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            current_time = time.time()
            if current_time - self.last_order_time < self.min_order_interval:
                logging.info("–ñ–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –≤—Ö–æ–¥–∞.")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            price = self.get_latest_price()
            if price is None:
                return

            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –∏ –≤—ã—Ö–æ–¥–∏–º
            if self.last_checked_price is None:
                self.last_checked_price = price
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            if self.active_position:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                self.update_trailing_stop(self.current_position, price)
                logging.info("–£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ö–æ–¥")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞
            atr = self.get_atr()
            if atr:
                # –ï—Å–ª–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏
                if atr > price * 0.01:  # –ï—Å–ª–∏ ATR > 1% –æ—Ç —Ü–µ–Ω—ã
                    self.min_order_interval = 600  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 10 –º–∏–Ω—É—Ç
                    logging.info(f"–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR: {atr:.2f}), —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏")
                else:
                    self.min_order_interval = 300  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ 5 –º–∏–Ω—É—Ç–∞–º

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã –∏ —Å—Ç–∞–∫–∞–Ω
            volume_direction = self.analyze_volume()
            if volume_direction is None:
                logging.info("–ù–µ—Ç —á–µ—Ç–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –æ–±—ä–µ–º–∞–º")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–Ω–¥ –∏ —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞
            trend = self.check_trend(volume_direction)
            if trend == "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π":
                logging.info("‚ùå –¢—Ä–µ–Ω–¥ —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É.")
                return

            if self.check_trend(volume_direction):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
                if price < self.long_term_levels["4H"]["support"]:
                    logging.info("–¶–µ–Ω–∞ —É –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –í—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
                    return

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
                stop_loss = self.calculate_stop_loss(volume_direction, price, atr)
                if not stop_loss:
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
                if not self.check_stop_loss_distance(price, stop_loss):
                    return

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
                if volume_direction == "Buy":
                    take_profit_1 = price * (1 + TAKE_PROFIT_1 / 100)
                    take_profit_2 = price * (1 + TAKE_PROFIT_2 / 100)
                    take_profit_3 = price * (1 + TAKE_PROFIT_3 / 100)
                else:
                    take_profit_1 = price * (1 - TAKE_PROFIT_1 / 100)
                    take_profit_2 = price * (1 - TAKE_PROFIT_2 / 100)
                    take_profit_3 = price * (1 - TAKE_PROFIT_3 / 100)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –º–∞—Ä–∂–∏
                try:
                    account_info = self.api.get_wallet_balance(accountType="UNIFIED")
                    if "result" in account_info and "list" in account_info["result"]:
                        balance_info = account_info["result"]["list"][0]
                        if "coin" in balance_info:
                            for item in balance_info["coin"]:
                                if item["coin"].upper() == "USDT":
                                    available_balance = float(item["availableBalance"])
                                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
                                    qty = self.calculate_position_size(stop_loss, price)
                                    if qty is None:
                                        return
                                        
                                    required_margin = (price * qty) / LEVERAGE
                                    if available_balance < required_margin:
                                        logging.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ä–∂–∏: –¥–æ—Å—Ç—É–ø–Ω–æ {available_balance:.2f} USDT, —Ç—Ä–µ–±—É–µ—Ç—Å—è {required_margin:.2f} USDT")
                                        return
                                    break
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∞—Ä–∂–∏: {e}")
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
                if not self.check_liquidity(volume_direction):
                    logging.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞")
                    return

                logging.info(f"–ü–ª–∞–Ω–∏—Ä—É–µ–º {volume_direction} –æ—Ä–¥–µ—Ä: qty={qty}, entry={price}, SL={stop_loss}")
                logging.info(f"–¶–µ–ª–∏: TP1={take_profit_1}, TP2={take_profit_2}, TP3={take_profit_3}")

                # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
                if self.place_order(volume_direction, qty, stop_loss, take_profit_1, take_profit_2, take_profit_3):
                    self.active_position = True
                    self.last_order_time = current_time
                    self.daily_trade_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–¥–µ–ª–æ–∫
                    self.current_position = {
                        "side": volume_direction,
                        "entry_price": price,
                        "stop_loss": stop_loss,
                        "take_profit_1": take_profit_1,
                        "take_profit_2": take_profit_2,
                        "take_profit_3": take_profit_3,
                        "size": qty
                    }
                    send_telegram_message(f"""
                    üéØ –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è:
                    –°—Ç–æ—Ä–æ–Ω–∞: {volume_direction}
                    –†–∞–∑–º–µ—Ä: {qty} {SYMBOL}
                    –í—Ö–æ–¥: {price:.2f}
                    SL: {stop_loss:.2f}
                    TP1: {take_profit_1:.2f}
                    TP2: {take_profit_2:.2f}
                    TP3: {take_profit_3:.2f}
                    üìä ATR: {atr:.2f if atr else 'N/A'}
                    üìà –°–¥–µ–ª–∫–∞ {self.daily_trade_count} –∏–∑ {self.max_daily_trades}
                    """)
            else:
                logging.info("–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ü–µ–Ω—É
            self.last_checked_price = price

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤ scalping_strategy: {e}"
            logging.error(error_msg)
            send_telegram_message(f"‚ö† {error_msg}")

    def update_trailing_stop(self, position, current_price):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —à–∞–≥–∞
        """
        try:
            side = position["side"]
            current_stop = position["stop_loss"]

            if side == "Buy":
                new_stop = current_price * (1 - TRAILING_STOP / 100)
                if new_stop <= current_stop or ((new_stop - current_stop) / current_stop * 100) < 0.1:
                    return False
                self.api.set_trading_stop(category="linear", symbol=SYMBOL, side="Buy", stopLoss=str(new_stop))
                position["stop_loss"] = new_stop
                return True

            else:
                new_stop = current_price * (1 + TRAILING_STOP / 100)
                if new_stop >= current_stop or ((current_stop - new_stop) / current_stop * 100) < 0.1:
                    return False
                self.api.set_trading_stop(category="linear", symbol=SYMBOL, side="Sell", stopLoss=str(new_stop))
                position["stop_loss"] = new_stop
                return True

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞: {e}")
            return False

    def check_trend(self, side):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏
            candles = self.get_kline_data(category="linear", symbol=SYMBOL, interval=5, limit=50)
            if not candles:
                logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π")
                return False

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            closes = [float(candle[4]) for candle in candles["list"]]
            if len(closes) < 50:
                logging.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return False

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ numpy.ndarray
            closes_np = np.array(closes, dtype=np.float64)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            sma_50 = talib.SMA(closes_np, timeperiod=50)[-1]
            sma_200 = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            if len(closes) >= 200:
                sma_200 = talib.SMA(closes_np, timeperiod=200)[-1]
            else:
                logging.warning("‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SMA200. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ SMA50 –∏ EMA21.")
                sma_200 = sma_50

            ema_21 = talib.EMA(closes_np, timeperiod=21)[-1]
            rsi = talib.RSI(closes_np, timeperiod=14)[-1]

            trend = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
            if sma_50 > sma_200 and ema_21 > sma_50:
                trend = "–ë—ã—á–∏–π üü¢"
            elif sma_50 < sma_200 and ema_21 < sma_50:
                trend = "–ú–µ–¥–≤–µ–∂–∏–π üî¥"
            elif abs(sma_50 - sma_200) < 0.5 * sma_50 and 45 <= rsi <= 55:
                trend = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"

            logging.info(f"üìà –¢—Ä–µ–Ω–¥: {trend} (SMA50: {sma_50}, SMA200: {sma_200}, EMA21: {ema_21}, RSI: {rsi})")
            return trend

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ check_trend: {e}")
            return False

    def check_liquidity(self, side):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –≤ —Å—Ç–∞–∫–∞–Ω–µ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω
            orderbook = self.api.get_orderbook(category="linear", symbol=SYMBOL)
            if not orderbook or "result" not in orderbook:
                logging.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞")
                return False

            # –°—É–º–º–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã –≤ –ø–µ—Ä–≤—ã—Ö 5 —É—Ä–æ–≤–Ω—è—Ö
            bids = sum([float(order["size"]) for order in orderbook["result"]["b"][:5]])
            asks = sum([float(order["size"]) for order in orderbook["result"]["a"][:5]])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤
            if side == "Buy":
                # –î–ª—è –ø–æ–∫—É–ø–∫–∏: –æ–±—ä–µ–º—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ
                return bids > asks * MIN_VOLUME_RATIO
            else:
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏: –æ–±—ä–µ–º—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ
                return asks > bids * MIN_VOLUME_RATIO

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {e}")
            return False

    def check_positions(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–ª–∞–≥ active_position
        """
        try:
            positions = self.api.get_positions(category="linear", symbol=SYMBOL)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ API
            if positions.get("retCode") != 0:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {positions.get('retMsg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                logging.error(error_msg)
                send_telegram_message(f"‚ö† {error_msg}")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if not positions.get("result", {}).get("list"):
                logging.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∑–∏—Ü–∏—è—Ö")
                self.active_position = False
                self.current_position = None
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
            for position in positions["result"]["list"]:
                size = float(position.get("size", 0))
                side = position.get("side", "")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è
                if (size != 0 and 
                    self.current_position and 
                    self.current_position.get("side") == side and
                    abs(float(position.get("size", 0)) - self.current_position.get("qty", 0)) < 0.001):
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏
                    self.current_position.update({
                        "size": size,
                        "leverage": float(position.get("leverage", 0)),
                        "unrealized_pnl": float(position.get("unrealizedPnl", 0)),
                        "mark_price": float(position.get("markPrice", 0))
                    })
                    
                    self.active_position = True
                    return True

            # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, –∑–Ω–∞—á–∏—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç
            self.active_position = False
            self.current_position = None
            return False

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–∑–∏—Ü–∏–π: {e}"
            logging.error(error_msg)
            send_telegram_message(f"‚ö† {error_msg}")
            self.active_position = False
            self.current_position = None
            return False

    def run(self):
        send_telegram_message("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–¥–µ–º–æ-—Å—á—ë—Ç Bybit).")
        while True:
            try:
                self.check_positions()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                self.scalping_strategy()
                self.check_pnl()
                time.sleep(CHECK_INTERVAL)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                send_telegram_message(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(CHECK_INTERVAL)

    def analyze_orderbook(self, side):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞
        """
        try:
            orderbook = self.api.get_orderbook(category="linear", symbol=SYMBOL, limit=ORDERBOOK_DEPTH)
            
            if "result" in orderbook:
                bids = orderbook["result"]["b"]
                asks = orderbook["result"]["a"]
                
                # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –æ–±—ä–µ–º –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É
                total_bids = sum(float(order["size"]) for order in bids)
                total_asks = sum(float(order["size"]) for order in asks)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä—É–ø–Ω—ã—Ö —Å—Ç–µ–Ω
                large_bids = sum(float(order["size"]) for order in bids if float(order["size"]) > VOLUME_THRESHOLD)
                large_asks = sum(float(order["size"]) for order in asks if float(order["size"]) > VOLUME_THRESHOLD)
                
                if side == "Buy":
                    return (total_bids > total_asks * MIN_VOLUME_RATIO and 
                           large_bids > large_asks * 1.5)
                else:
                    return (total_asks > total_bids * MIN_VOLUME_RATIO and 
                           large_asks > large_bids * 1.5)
            
            return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç–∞–∫–∞–Ω–∞: {e}")
            return False

    def analyze_volume(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–ø—É–ª—å—Å–∞"""
        try:
            trades = self.api.get_executions(category="linear", symbol=SYMBOL, limit=50)

            if "result" not in trades or "list" not in trades["result"]:
                logging.error("–û—à–∏–±–∫–∞: API Bybit –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö")
                return None

            buy_volume = 0
            sell_volume = 0

            for trade in trades["result"]["list"]:
                try:
                    size = float(trade["execQty"])  # –†–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏
                    side = trade["side"]  # Buy / Sell

                    if side == "Buy":
                        buy_volume += size
                    elif side == "Sell":
                        sell_volume += size
                except KeyError as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–¥–µ–ª–∫–∏: {e}")
                    continue

            logging.debug(f"–û–±—ä–µ–º Buy: {buy_volume}, –û–±—ä–µ–º Sell: {sell_volume}")

            if abs(buy_volume - sell_volume) < 0.05 * (buy_volume + sell_volume):
                return "–§–ª–µ—Ç"

            return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ–±—ä–µ–º–æ–≤: {e}")
            return None

    def calculate_vwap(self):
        """ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç VWAP (Volume Weighted Average Price) """
        try:
            candles = self.api.get_kline(category="linear", symbol=SYMBOL, interval=1, limit=VWAP_PERIOD)

            if not candles or "result" not in candles or "list" not in candles["result"]:
                logging.error("‚ùå API Bybit –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è VWAP")
                return None

            total_volume = 0
            total_price_volume = 0

            for candle in candles["result"]["list"]:
                try:
                    volume = float(candle[5])  # –ò–Ω–¥–µ–∫—Å 5 –æ–±—ã—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ä–µ–º—É
                    close_price = float(candle[4])  # –ò–Ω–¥–µ–∫—Å 4 ‚Äî —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                    total_volume += volume
                    total_price_volume += close_price * volume
                except (ValueError, IndexError, TypeError) as e:
                    logging.warning(f"‚ö† –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å–≤–µ—á–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
                    continue

            if total_volume == 0:
                logging.error("‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ VWAP (–Ω—É–ª–µ–≤–æ–π –æ–±—ä–µ–º)")
                return None

            return total_price_volume / total_volume

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ VWAP: {e}")
            return None

    def calculate_position_size(self, stop_loss_price, entry_price):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–∞ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
            account_info = self.api.get_wallet_balance(accountType="UNIFIED")
            if "result" not in account_info or "list" not in account_info["result"]:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ")
                return None

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT
            available_balance = None
            for coin in account_info["result"]["list"][0].get("coin", []):
                if coin["coin"].upper() == "USDT":
                    available_balance = float(coin["availableBalance"])
                    break

            if available_balance is None:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å USDT")
                return None

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫ –≤ USDT
            risk_amount = available_balance * (RISK_PERCENTAGE / 100)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            stop_distance = abs(entry_price - stop_loss_price)
            if stop_distance == 0:
                logging.error("–ù—É–ª–µ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞")
                return None

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
            position_size = (risk_amount * LEVERAGE) / stop_distance

            # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—ã
            min_size = MIN_POSITION_SIZES.get(SYMBOL, 0.001)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –ª–∏ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            if position_size < min_size:
                error_msg = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {min_size} {SYMBOL}"
                logging.warning(error_msg)
                send_telegram_message(f"‚ö†Ô∏è {error_msg}")
                return None

            # –û–∫—Ä—É–≥–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            # –î–ª—è BTC –∏ ETH –∏—Å–ø–æ–ª—å–∑—É–µ–º 3 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - 2
            if SYMBOL in ["BTCUSDT", "ETHUSDT"]:
                position_size = round(position_size, 3)
            else:
                position_size = round(position_size, 2)

            return position_size if position_size >= min_size else None

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}"
            logging.error(error_msg)
            send_telegram_message(f"‚ö†Ô∏è {error_msg}")
            return None

    TIMEFRAME_MAPPING = {
        "1D": "D",
        "1W": "W",
        "1M": "M"
    }

    def fetch_historical_data(self, timeframe="1D", limit=200):
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è (close).
        """
        try:
            interval = self.TIMEFRAME_MAPPING.get(timeframe, "D")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "D" (–¥–µ–Ω—å)
            response = self.api.get_kline(category="linear", symbol=SYMBOL, interval=interval, limit=limit)
            
            if response is None:
                logging.warning("‚ö† API Bybit –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞.")
                return []

            if "result" in response and "list" in response["result"]:
                closes = [float(candle[4]) for candle in response["result"]["list"]]
                if not closes:
                    logging.warning(f"‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ —Å–≤–µ—á–∏ –¥–ª—è {timeframe}")
                return closes

            logging.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {timeframe}")
            return []
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {timeframe}: {e}")
            return []

    def get_support_resistance(self, closes):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –≤—ã–±—Ä–æ—Å–æ–≤.
        """
        if not closes or len(closes) < 10:
            return None, None

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤: —É–±–∏—Ä–∞–µ–º 5% —Å–∞–º—ã—Ö –Ω–∏–∑–∫–∏—Ö –∏ 5% —Å–∞–º—ã—Ö –≤—ã—Å–æ–∫–∏—Ö —Ü–µ–Ω
        lower_bound = np.percentile(closes, 5)
        upper_bound = np.percentile(closes, 95)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        support = min([price for price in closes if price >= lower_bound])
        resistance = max([price for price in closes if price <= upper_bound])

        return support, resistance

    def market_structure_analysis(self, closes):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä—ã–Ω–∫–∞ (Higher Highs, Lower Lows).
        """
        if len(closes) < 10:
            return None

        highs = [closes[i] for i in range(1, len(closes) - 1) if closes[i] > closes[i - 1] and closes[i] > closes[i + 1]]
        lows = [closes[i] for i in range(1, len(closes) - 1) if closes[i] < closes[i - 1] and closes[i] < closes[i + 1]]

        last_high = highs[-1] if highs else None
        last_low = lows[-1] if lows else None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–≤–µ—á–µ–π
        trend = "–ë–æ–∫–æ–≤–∏–∫"
        if last_high and last_low:
            if last_high > last_low * 1.02:
                trend = "–ë—ã—á–∏–π —Ç—Ä–µ–Ω–¥ üü¢"
            elif last_low < last_high * 0.98:
                trend = "–ú–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥ üî¥"

        logging.info(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—ã–Ω–∫–∞: {trend}, High: {last_high}, Low: {last_low}")
        return trend, last_high, last_low

    def perform_long_term_analysis(self):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞.
        """
        # üìä –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        closes_1D = self.fetch_historical_data("1D", 200)
        closes_1W = self.fetch_historical_data("1W", 100)
        closes_1M = self.fetch_historical_data("1M", 50)

        # üèÜ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        support_1D, resistance_1D = self.get_support_resistance(closes_1D)
        support_1W, resistance_1W = self.get_support_resistance(closes_1W)
        support_1M, resistance_1M = self.get_support_resistance(closes_1M)

        # üî• –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
        trend_1D = self.analyze_trend(closes_1D)
        trend_1W = self.analyze_trend(closes_1W)
        trend_1M = self.analyze_trend(closes_1M)

        # üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã
        volume_trend = self.analyze_volume()

        # üìä –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        market_trend_1D, last_high_1D, last_low_1D = self.market_structure_analysis(closes_1D)

        # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logging.info(f"""
        üìä –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
        - 1D: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ {support_1D}, –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ {resistance_1D}, –¢—Ä–µ–Ω–¥: {trend_1D}, –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {market_trend_1D}
        - 1W: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ {support_1W}, –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ {resistance_1W}, –¢—Ä–µ–Ω–¥: {trend_1W}
        - 1M: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ {support_1M}, –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ {resistance_1M}, –¢—Ä–µ–Ω–¥: {trend_1M}
        - üî• –û–±—ä—ë–º–Ω—ã–π —Ç—Ä–µ–Ω–¥: {volume_trend}
        """)

        return {
            "support_resistance": {
                "1D": (support_1D, resistance_1D),
                "1W": (support_1W, resistance_1W),
                "1M": (support_1M, resistance_1M)
            },
            "trends": {
                "1D": trend_1D,
                "1W": trend_1W,
                "1M": trend_1M
            },
            "volume_trend": volume_trend,
            "market_structure": {
                "1D": (last_high_1D, last_low_1D, market_trend_1D)
            }
        }

    def analyze_trend(self, closes):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SMA, EMA –∏ RSI.
        """
        if len(closes) < 50:
            logging.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞.")
            return None

        closes_np = np.array(closes)

        # –†–∞—Å—á—ë—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        sma_50 = talib.SMA(closes_np, timeperiod=50)[-1]
        sma_200 = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        if len(closes) >= 200:
            sma_200 = talib.SMA(closes_np, timeperiod=200)[-1]
        else:
            logging.warning("‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SMA200. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ SMA50 –∏ EMA21.")
            sma_200 = sma_50

        ema_21 = talib.EMA(closes_np, timeperiod=21)[-1]
        rsi = talib.RSI(closes_np, timeperiod=14)[-1]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SMA200
        if sma_200 is None:
            logging.warning("‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SMA200. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ SMA50 –∏ EMA21.")
            sma_200 = sma_50  # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏

        if sma_200 is not None and sma_50 is not None:
            if sma_50 > sma_200:
                trend = "–ë—ã—á–∏–π"
            else:
                trend = "–ú–µ–¥–≤–µ–∂–∏–π"
        else:
            trend = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"

        if abs(sma_50 - sma_200) < 0.5 * sma_50 and 45 <= rsi <= 55:
            trend = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"

        logging.info(f"üìà –¢—Ä–µ–Ω–¥: {trend} (SMA50: {sma_50}, SMA200: {sma_200}, EMA21: {ema_21}, RSI: {rsi})")
        return trend

    def get_kline_data(self, category, symbol, interval, limit=50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        response = self.api.get_kline(category=category, symbol=symbol, interval=interval, limit=limit)
        if response and response.get("result"):
            return response["result"]
        logging.warning("‚ö† Bybit API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥.")
        return None

# ======================== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ========================
if __name__ == "__main__":
    bot = TradingBot()

    logging.info("üîÑ –¢–µ—Å—Ç API Bybit...")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
    price = bot.get_latest_price()
    logging.info(f"üìå –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {SYMBOL}: {price}")

    # –¢–µ—Å—Ç —Å—Ç–∞–∫–∞–Ω–∞
    orderbook = bot.api.get_orderbook()
    logging.info(f"üìå –¢–µ—Å—Ç —Å—Ç–∞–∫–∞–Ω–∞: {orderbook}")

    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤
    volume_direction = bot.analyze_volume()
    logging.info(Fore.GREEN + f"üìå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤: {volume_direction}" + Style.RESET_ALL)
    logging.warning(Fore.YELLOW + "‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SMA200!" + Style.RESET_ALL)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    balance = bot.api.get_wallet_balance()
    logging.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞: {balance}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–µ—á–∞
    leverage = bot.api.set_leverage(symbol=SYMBOL, leverage=LEVERAGE)
    logging.info(f"‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–µ—á–æ: {leverage}")

    logging.info("‚úÖ –¢–µ—Å—Ç API Bybit –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")

    # –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ–±—ä–µ–º–∞
    test_volume_direction = bot.analyze_volume() or "Buy"
    logging.info(f"üìå –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π —Å–∏–≥–Ω–∞–ª –æ–±—ä–µ–º–∞: {test_volume_direction}")

    # –°–∏–º—É–ª—è—Ü–∏—è –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É
    test_price = bot.get_latest_price()
    test_stop_loss = bot.calculate_stop_loss(test_volume_direction, test_price)
    test_take_profit_1 = test_price * 1.02
    test_take_profit_2 = test_price * 1.03
    test_take_profit_3 = test_price * 1.05

    logging.info(f"üõ† –°–∏–º—É–ª—è—Ü–∏—è —Å–¥–µ–ª–∫–∏: {test_volume_direction} –Ω–∞ {test_price}")
    logging.info(f"üî¥ SL: {test_stop_loss}, üü¢ TP1: {test_take_profit_1}, TP2: {test_take_profit_2}, TP3: {test_take_profit_3}")

    if DEMO_MODE:
        logging.info("‚úÖ –¢–µ—Å—Ç —Å–¥–µ–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω (–¥–µ–º–æ)")
    else:
        success = bot.api.place_order(
            side=test_volume_direction,
            qty=0.001,
            stop_loss=test_stop_loss,
            take_profit_1=test_take_profit_1,
            take_profit_2=test_take_profit_2,
            take_profit_3=test_take_profit_3
        )
        logging.info(f"‚úÖ –°–¥–µ–ª–∫–∞ {'—É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞' if success else '–Ω–µ —É–¥–∞–ª–∞—Å—å'}")

    logging.info("üìä –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SMA, RSI, VWAP
    closes = bot.fetch_historical_data("1D", 50)
    trend = bot.analyze_trend(closes)
    vwap = bot.calculate_vwap()

    logging.info(f"üìà –¢—Ä–µ–Ω–¥ –Ω–∞ 1D: {trend}")
    logging.info(f"üìä VWAP: {vwap}")

    bot.run()
